{"version":3,"sources":["game-engine/index.js","svg-cards.svg","game-engine/card/index.js","game-engine/card/values.js","game-engine/card/colors.js","game-engine/card/card.js","game-engine/game.js","game-engine/player.js","game-engine/deck.js","game-engine/team.js","Result.tsx","Game.tsx","ResultChinese.tsx","GameChinese.tsx","Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["__createBinding","this","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__exportStar","exports","p","prototype","hasOwnProperty","call","value","require","module","Values","pointsHeld","isJoker","SMALL_JOKER","BIG_JOKER","FIVE","TEN","KING","Colors","isValidColor","color","HEART","SPADE","CLUB","DIAMOND","JOKER","Card","values_js_1","colors_js_1","Error","_value","_color","configurable","isSpecial","isMaster","currentMasterColor","currentMasterNumber","toString","__extends","extendStatics","d","b","setPrototypeOf","__proto__","Array","__","constructor","Game","events_1","card_1","player_js_1","deck_js_1","team_js_1","_super","_a","masterNumber","_b","p1","p2","_c","p3","p4","_this","_players","_currentRoundCards","roundCount","player_1","Player","player_2","player_3","player_4","_teams","Team","start","phase","emit","drawPile","Deck","_currentPlayer","players","Math","floor","random","masterColor","length","draw","card_drawn","hand","concat","player","name","card","colors_array","cards","map","findMostDuplicates","nextPlayer","setMasterColor","takeRemaining","playerName","getPlayerByName","getPlayerTeam","role","cardsTaken","putDownHiddenCards","cardsToBePutDown","reduce","accumulator","current","forEach","hasCard","removeCard","_hiddenCards","currentPlayer","filter","initRound","play","cardToBePlayed","has_matching","push","playedBy","cleanRound","largestCard","prevCard","currentCard","roundWinningTeam","cardsToAdd","playedCard","points","ownedCards","discardedCards","_discardedPile","winner","score","calculateScore","revealHiddenCards","team","getPlayerIndex","findIndex","array","count_obj","i","keys","sort","a","index","EventEmitter","includes","c","splice","__importDefault","mod","__esModule","shuffle_array_1","shuffle","deck","j","default","createDeck","shift","player1","player2","_ownedCards","set","addCard","_card","cardToAdd","Result","isOpen","takenCards","flip","hiddenCards","className","style","visibility","src","svg","onClick","window","location","reload","cookies","Cookies","gameInstance","game","socket","useContext","SocketContext","useState","setGame","cardsToPutQueue","setCardsToPutQueue","currentRoundState","setCurrentRoundState","cardsToPlay","setCardsToPlay","topCards","setTopCards","currentRoundCards","setCurrentRoundCards","challengeCards","setChallengeCards","setPlayer","teammate","setTeammate","opponents","setOpponents","res","setRes","consoleMessages","setConsoleMessages","_console","useRef","addMessage","message","prevMessages","setTimeout","scrollTop","scrollHeight","useEffect","on","type","payload","prevCards","remove","flipCards","find","console","log","_player","reverse","cardsPerPlayer","currentRoundCount","slice","_currentRoundTopCards","handleAddCardToPutQueue","newQueue","cardIndex","handlePlaceDownCard","newCards","handlePlayCard","idx","key","confirm","_","opponent","handleSetMasterColor","ref","_Colors","_Values","n","Home","setName","setRole","room","setRoom","lang","setLang","setMasterNumber","hasRoom","setHasRoom","isReady","setIsReady","alert","langRef","nameRef","roomRef","e","innerHTML","defaultValue","onChange","target","TWO","THREE","FOUR","SIX","SEVEN","EIGHT","NINE","JACK","QUEEN","ACE","placeholder","preventDefault","handleSubmit","HOST","origin","replace","socketIOClient","React","createContext","App","Provider","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gGACA,IAAIA,EAAmBC,MAAQA,KAAKD,kBAAqBE,OAAOC,OAAU,SAASC,EAAGC,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3BJ,OAAOO,eAAeL,EAAGG,EAAI,CAAEG,YAAY,EAAMC,IAAK,WAAa,OAAON,EAAEC,OAC1E,SAASF,EAAGC,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,KAEVM,EAAgBX,MAAQA,KAAKW,cAAiB,SAASP,EAAGQ,GAC1D,IAAK,IAAIC,KAAKT,EAAa,YAANS,GAAoBZ,OAAOa,UAAUC,eAAeC,KAAKJ,EAASC,IAAId,EAAgBa,EAASR,EAAGS,IAE3HZ,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDN,EAAaO,EAAQ,IAAWN,GAChCD,EAAaO,EAAQ,IAAWN,I,kBCbhCO,EAAOP,QAAU,IAA0B,uC,gCCC3C,IAAIb,EAAmBC,MAAQA,KAAKD,kBAAqBE,OAAOC,OAAU,SAASC,EAAGC,EAAGC,EAAGC,QAC7EC,IAAPD,IAAkBA,EAAKD,GAC3BJ,OAAOO,eAAeL,EAAGG,EAAI,CAAEG,YAAY,EAAMC,IAAK,WAAa,OAAON,EAAEC,OAC1E,SAASF,EAAGC,EAAGC,EAAGC,QACTC,IAAPD,IAAkBA,EAAKD,GAC3BF,EAAEG,GAAMF,EAAEC,KAEVM,EAAgBX,MAAQA,KAAKW,cAAiB,SAASP,EAAGQ,GAC1D,IAAK,IAAIC,KAAKT,EAAa,YAANS,GAAoBZ,OAAOa,UAAUC,eAAeC,KAAKJ,EAASC,IAAId,EAAgBa,EAASR,EAAGS,IAE3HZ,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDN,EAAaO,EAAQ,IAAcN,GACnCD,EAAaO,EAAQ,IAAgBN,GACrCD,EAAaO,EAAQ,IAAgBN,I,gCCXrC,IAAIQ,EAFJnB,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQS,WAAaT,EAAQU,QAAUV,EAAQQ,YAAS,EAExD,SAAWA,GAEPA,EAAOA,EAAM,IAAU,GAAK,MAC5BA,EAAOA,EAAM,MAAY,GAAK,QAC9BA,EAAOA,EAAM,KAAW,GAAK,OAC7BA,EAAOA,EAAM,KAAW,GAAK,OAC7BA,EAAOA,EAAM,IAAU,GAAK,MAC5BA,EAAOA,EAAM,MAAY,GAAK,QAC9BA,EAAOA,EAAM,MAAY,GAAK,QAC9BA,EAAOA,EAAM,KAAW,GAAK,OAC7BA,EAAOA,EAAM,IAAU,IAAM,MAE7BA,EAAOA,EAAM,KAAW,IAAM,OAC9BA,EAAOA,EAAM,MAAY,IAAM,QAC/BA,EAAOA,EAAM,KAAW,IAAM,OAC9BA,EAAOA,EAAM,IAAU,IAAM,MAE7BA,EAAOA,EAAM,YAAkB,IAAM,cACrCA,EAAOA,EAAM,UAAgB,IAAM,YAlBvC,CAmBGA,EAASR,EAAQQ,SAAWR,EAAQQ,OAAS,KAShDR,EAAQU,QARR,SAAiBL,GACb,OAAIA,IAAUG,EAAOG,aAAeN,IAAUG,EAAOI,WAmBzDZ,EAAQS,WAXR,SAAoBJ,GAChB,OAAIA,IAAUG,EAAOK,KACV,EAEFR,IAAUG,EAAOM,KAAOT,IAAUG,EAAOO,KACvC,GAGA,I,gCCtCf,IAAIC,EAFJ3B,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQiB,aAAejB,EAAQgB,YAAS,EAExC,SAAWA,GACPA,EAAOA,EAAM,MAAY,GAAK,QAC9BA,EAAOA,EAAM,MAAY,GAAK,QAC9BA,EAAOA,EAAM,KAAW,GAAK,OAC7BA,EAAOA,EAAM,QAAc,GAAK,UAChCA,EAAOA,EAAM,MAAY,GAAK,QALlC,CAMGA,EAAShB,EAAQgB,SAAWhB,EAAQgB,OAAS,KAShDhB,EAAQiB,aARR,SAAsBC,GAClB,OAAIA,IAAUF,EAAOG,OAASD,IAAUF,EAAOI,OAASF,IAAUF,EAAOK,MAAQH,IAAUF,EAAOM,SAAWJ,IAAUF,EAAOO,Q,sJCXlIlC,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQwB,UAAO,EACf,IAAIC,EAAcnB,EAAQ,IACtBoB,EAAcpB,EAAQ,IACtBkB,EAAsB,WACtB,SAASA,EAAKnB,EAAOa,GACjB,IAAKO,EAAYf,QAAQL,KAAWqB,EAAYT,aAAaC,GACzD,MAAM,IAAIS,MAAM,iCAEpB,GAAIF,EAAYf,QAAQL,IAAUa,GAAWA,IAAUQ,EAAYV,OAAOO,MACtE,MAAM,IAAII,MAAM,mCAEpBvC,KAAKwC,OAASvB,EACdjB,KAAKyC,OAASX,GAASQ,EAAYV,OAAOO,MAoC9C,OAlCAlC,OAAOO,eAAe4B,EAAKtB,UAAW,QAAS,CAC3CJ,IAAK,WACD,OAAOV,KAAKwC,QAEhB/B,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAe4B,EAAKtB,UAAW,QAAS,CAC3CJ,IAAK,WACD,OAAOV,KAAKyC,QAEhBhC,YAAY,EACZiC,cAAc,IAElBN,EAAKtB,UAAUQ,QAAU,WACrB,OAAOe,EAAYf,QAAQtB,KAAKiB,QAEpCmB,EAAKtB,UAAU6B,UAAY,WACvB,OAAQ3C,KAAKiB,QAAUoB,EAAYjB,OAAOK,MAAQzB,KAAKiB,QAAUoB,EAAYjB,OAAOM,KAAO1B,KAAKiB,QAAUoB,EAAYjB,OAAOO,MAEjIS,EAAKtB,UAAU8B,SAAW,SAAUC,EAAoBC,GACpD,OAAI9C,KAAKyC,SAAWI,GAAsB7C,KAAKyC,SAAWH,EAAYV,OAAOO,OAASnC,KAAKwC,SAAWM,GAO1GV,EAAKtB,UAAUO,WAAa,WACxB,OAAOgB,EAAYhB,WAAWrB,KAAKiB,QAEvCmB,EAAKtB,UAAUiC,SAAW,WACtB,OAAOV,EAAYjB,OAAOpB,KAAKwC,QAAU,KAAOF,EAAYV,OAAO5B,KAAKyC,SAAW,KAEhFL,EA7Ce,GA+C1BxB,EAAQwB,KAAOA,G,gCClDf,IAAIY,EAAahD,MAAQA,KAAKgD,WAAe,WACzC,IAAIC,EAAgB,SAAUC,EAAGC,GAI7B,OAHAF,EAAgBhD,OAAOmD,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUJ,EAAGC,GAAKD,EAAEG,UAAYF,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAItC,KAAKsC,EAAOlD,OAAOa,UAAUC,eAAeC,KAAKmC,EAAGtC,KAAIqC,EAAErC,GAAKsC,EAAEtC,MAC3EqC,EAAGC,IAE5B,OAAO,SAAUD,EAAGC,GAEhB,SAASI,IAAOvD,KAAKwD,YAAcN,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEpC,UAAkB,OAANqC,EAAalD,OAAOC,OAAOiD,IAAMI,EAAGzC,UAAYqC,EAAErC,UAAW,IAAIyC,IAV1C,GAa7CtD,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQ6C,UAAO,EACf,IAAIC,EAAWxC,EAAQ,IACnByC,EAASzC,EAAQ,IACjB0C,EAAc1C,EAAQ,IACtB2C,EAAY3C,EAAQ,IACpB4C,EAAY5C,EAAQ,IACpBuC,EAAsB,SAAUM,GAGhC,SAASN,EAAKO,EAAIC,GACd,IAAIC,EAAKF,EAAG,GAAIG,EAAKD,EAAG,GAAIE,EAAKF,EAAG,GAAIG,EAAKL,EAAG,GAAIM,EAAKD,EAAG,GAAIE,EAAKF,EAAG,GACpEG,EAAQT,EAAO/C,KAAKhB,OAASA,KAKjC,GAJAwE,EAAMC,SAAW,GACjBD,EAAME,mBAAqB,GAC3BF,EAAMG,WAAa,EACnBH,EAAMP,aAAeA,GAChBE,IAAOC,IAAOE,IAAOC,EACtB,MAAMhC,MAAM,sEAEhB,IAAIqC,EAAW,IAAIhB,EAAYiB,OAAOV,GAClCW,EAAW,IAAIlB,EAAYiB,OAAOT,GAClCW,EAAW,IAAInB,EAAYiB,OAAOP,GAClCU,EAAW,IAAIpB,EAAYiB,OAAON,GAGtC,OAFAC,EAAMS,OAAS,CAAC,IAAInB,EAAUoB,KAAK,CAACN,EAAUE,GAAW,UAAW,IAAIhB,EAAUoB,KAAK,CAACH,EAAUC,GAAW,WAC7GR,EAAMC,SAAW,CAACG,EAAUE,EAAUC,EAAUC,GACzCR,EA4TX,OA9UAxB,EAAUS,EAAMM,GAoBhBN,EAAK3C,UAAUqE,MAAQ,WASnB,GAPAnF,KAAKoF,MAAQ,UACbpF,KAAKqF,KAAK,cAAe,CAAED,MAAOpF,KAAKoF,QAEvCpF,KAAKsF,SAAW,IAAIzB,EAAU0B,KAE9BvF,KAAKwF,eAAiBxF,KAAKyF,QAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,WAEzB,UAAtB5F,KAAKiE,aAEL,IADAjE,KAAK6F,YAAclC,EAAO/B,OAAOO,MAC1BnC,KAAKsF,SAASQ,OAAS,GAC1B9F,KAAK+F,QAIjBtC,EAAK3C,UAAUiF,KAAO,WAElB,GAAqB,YAAf/F,KAAKoF,MACP,MAAM7C,MAAM,wCAGhB,IAAIyD,EAAahG,KAAKsF,SAASS,OAK/B,GAJA/F,KAAKwF,eAAeS,KAAOjG,KAAKwF,eAAeS,KAAKC,OAAO,CAACF,IAE5DhG,KAAKqF,KAAK,OAAQ,CAAEc,OAAQnG,KAAKwF,eAAeY,KAAMC,KAAML,IAE/B,IAAzBhG,KAAKsF,SAASQ,OAAc,CAE5B,IAAK9F,KAAK6F,YAAa,CACnB,IAAIS,EAAetG,KAAKsF,SAASiB,MAAMC,KAAI,SAAUH,GAAQ,OAAOA,EAAKvE,SACzE9B,KAAK6F,YAAc7F,KAAKyG,mBAAmBH,GAE/CtG,KAAKoF,MAAQ,SAEbpF,KAAKqF,KAAK,cAAe,CAAED,MAAOpF,KAAKoF,QAG3CpF,KAAKwF,eAAiBxF,KAAK0G,YAE/BjD,EAAK3C,UAAU6F,eAAiB,SAAUN,GAEtC,GAAqB,YAAfrG,KAAKoF,MACP,MAAM7C,MAAM,+CAGhB,GAAM8D,EAAKpF,QAAUjB,KAAKiE,aACtB,MAAM1B,MAAM,qDAIhB,IAFAvC,KAAK6F,YAAcQ,EAAKvE,MAEjB9B,KAAKsF,SAASQ,OAAS,GAC1B9F,KAAK+F,QAGbtC,EAAK3C,UAAU8F,cAAgB,SAAUC,GAErC,GAAqB,WAAf7G,KAAKoF,MACP,MAAM7C,MAAM,kDAGhB,IAAI4D,EAASnG,KAAK8G,gBAAgBD,GAClC,IAAKV,EACD,MAAM5D,MAAM,+BAEhB,GAA0C,WAApCvC,KAAK+G,cAAcZ,GAAQa,KAC7B,MAAMzE,MAAM,qDAEhB,IAAI0E,EAAajH,KAAKsF,SAASsB,gBAC/BT,EAAOF,KAAOE,EAAOF,KAAKC,OAAOe,GACjCjH,KAAKqF,KAAK,WAAY,CAAEc,OAAQA,EAAOC,KAAMG,MAAOU,IACpDjH,KAAKoF,MAAQ,UACbpF,KAAKqF,KAAK,cAAe,CAAED,MAAOpF,KAAKoF,SAE3C3B,EAAK3C,UAAUoG,mBAAqB,SAAUL,EAAYM,GAEtD,GAAqB,YAAfnH,KAAKoF,MACP,MAAM7C,MAAM,mDAGhB,GAAkC,IAA5B4E,EAAiBrB,OACnB,MAAMvD,MAAM,gCAMhB,GAHkB4E,EAAiBC,QAAO,SAAUC,EAAaC,GAC7D,OAAOD,EAAcC,EAAQjG,eAC9B,GACe,GACd,MAAMkB,MAAM,gEAGhB,IAAI4D,EAASnG,KAAK8G,gBAAgBD,GAClC,IAAKV,EACD,MAAM5D,MAAM,+BAEhB4E,EAAiBI,SAAQ,SAAUlB,GAC/B,IAAKF,EAAOqB,QACR,MAAMjF,MAAM,oBAAsB8D,EAAKpF,MAAQ,IAAMoF,EAAKvE,MAAQ,cAAgBqE,EAAOC,KAAO,QAGxGe,EAAiBI,SAAQ,SAAUlB,GAC/BF,EAAOsB,WAAWpB,MAEtBrG,KAAK0H,aAAeP,EACpBnH,KAAKqF,KAAK,UAAW,CAAEc,OAAQU,EAAYN,MAAOY,IAClDnH,KAAKoF,MAAQ,UACbpF,KAAKqF,KAAK,cAAe,CAAED,MAAOpF,KAAKoF,QACvC,IAAIuC,EAAgB3H,KAAK+G,cAAcZ,GAAQV,QAAQmC,QAAO,SAAUzB,GAAU,QAASA,EAAOC,OAASS,MAAgB,GAC3H7G,KAAK6H,UAAUF,IAEnBlE,EAAK3C,UAAUgH,KAAO,SAAUC,GAC5B,IAAIvD,EAAQxE,KAEZ,GAAIA,KAAK0E,mBAAmBoB,OAAS,EACjC,MAAMvD,MAAM,2CAGhB,IAAKvC,KAAKwF,eAAegC,QAAQO,GAC7B,MAAMxF,MAAM,kBAAoBvC,KAAKwF,eAAeY,KAAO,uBAAyB2B,EAAehF,WAAa,aAGpH,GAAM/C,KAAK0E,mBAAmBoB,OAAS,GAASiC,EAAejG,QAAU9B,KAAK0E,mBAAmB,GAAG2B,KAAKvE,OAAYiG,EAAenF,SAAS5C,KAAK6F,YAAa7F,KAAKiE,eAAiBjE,KAAK0E,mBAAmB,GAAG2B,KAAKzD,SAAS5C,KAAK6F,YAAa7F,KAAKiE,cAAiB,CAClQ,IAAI+D,OAAe,EAanB,GAZKhI,KAAK0E,mBAAmBoB,OAAS,IAAO9F,KAAK0E,mBAAmB,GAAG2B,KAAKzD,SAAS5C,KAAK6F,YAAa7F,KAAKiE,cACzG+D,IAAiBhI,KAAKwF,eAAeS,KAAK2B,QAAO,SAAUvB,GACvD,IAAKA,EAAKzD,SAAS4B,EAAMqB,YAAarB,EAAMP,cACxC,OAAOoC,EAAKvE,QAAU0C,EAAME,mBAAmB,GAAG2B,KAAKvE,SAIzD9B,KAAK0E,mBAAmBoB,OAAS,GAAM9F,KAAK0E,mBAAmB,GAAG2B,KAAKzD,SAAS5C,KAAK6F,YAAa7F,KAAKiE,gBAC7G+D,IAAiBhI,KAAKwF,eAAeS,KAAK2B,QAAO,SAAUvB,GACvD,OAAOA,EAAKzD,SAAS4B,EAAMqB,YAAarB,EAAMP,kBAGjDjE,KAAK0E,mBAAmBoB,OAAS,GAAMkC,EACxC,MAAMzF,MAAM,wBAA0BwF,EAAehF,WAAa,2CAG1E/C,KAAK0E,mBAAmBuD,KAAK,CACzB5B,KAAM0B,EACNG,SAAUlI,KAAKwF,iBAEnBxF,KAAKwF,eAAeiC,WAAWM,GAE/B/H,KAAKqF,KAAK,WAAY,CAAEc,OAAQnG,KAAKwF,eAAeY,KAAMC,KAAM0B,IAEzB,IAAnC/H,KAAK0E,mBAAmBoB,OACxB9F,KAAKmI,aAGLnI,KAAKwF,eAAiBxF,KAAK0G,YAGnCjD,EAAK3C,UAAU+G,UAAY,SAAU1B,GACjCnG,KAAKwF,eAAiBW,EACtBnG,KAAK2E,cAETlB,EAAK3C,UAAUqH,WAAa,WACxB,IAAI3D,EAAQxE,KACZ,GAAyC,IAAnCA,KAAK0E,mBAAmBoB,OAC1B,MAAMvD,MAAM,uCAGAvC,KAAK0E,mBAAmB,GAAxC,IACI0D,EAAcpI,KAAK0E,mBAAmB0C,QAAO,SAAUiB,EAAUC,GACjE,OAAKA,EAAYjC,KAAKzD,SAAS4B,EAAMqB,YAAarB,EAAMP,gBAAkBoE,EAAShC,KAAKzD,SAAS4B,EAAMqB,YAAarB,EAAMP,eAAoBqE,EAAYjC,KAAKvE,QAAUuG,EAAShC,KAAKvE,OAAWwG,EAAYjC,KAAKpF,MAAQoH,EAAShC,KAAKpF,MAC9NqH,EAGAD,KAGXE,EAAmBvI,KAAK+G,cAAcqB,EAAYF,UAEtD,GAA8B,WAA1BK,EAAiBvB,KAAmB,CACpC,IAAIwB,EAAaxI,KAAK0E,mBAAmB8B,KAAI,SAAUiC,GACnD,GAAIA,EAAWpC,KAAK1D,YAChB,MAAO,CACH0D,KAAMoC,EAAWpC,KACjBqC,OAAQD,EAAWpC,KAAKhF,iBAIpCkH,EAAiBI,WAAaJ,EAAiBI,WAAWzC,OAAOsC,GAGrE,IAAII,EAAiB5I,KAAK0E,mBAAmB8B,KAAI,SAAUiC,GACvD,IAAMA,EAAWpC,KAAK1D,YAClB,OAAO8F,KASf,GANAzI,KAAK6I,eAAiB7I,KAAK6I,eAAe3C,OAAO0C,GACjD5I,KAAKqF,KAAK,WAAY,CAAEyD,OAAQP,EAAkBhC,MAAOvG,KAAK0E,qBAE9D1E,KAAK0E,mBAAqB,GAC1B1E,KAAK2E,aAEmB,KAApB3E,KAAK2E,WAAmB,CACxB,IAAIoE,OAAQ,EAGRA,EAD0B,WAA1BR,EAAiBvB,KACThH,KAAKgJ,gBAAe,GAGpBhJ,KAAKgJ,gBAAe,GAGhChJ,KAAKqF,KAAK,MAAO,CAAE0D,MAAOA,SAI1B/I,KAAK6H,UAAUO,EAAYF,WAGnCzE,EAAK3C,UAAUkI,eAAiB,SAAUC,GACtC,IAAIF,EAAQ,EACRE,IAIAF,GAHsB/I,KAAK0H,aAAaN,QAAO,SAAUC,EAAaC,GAClE,OAAOD,EAAcC,EAAQjG,eAC9B,IAOP,OADA0H,GAHsB/I,KAAKiF,OAAO2C,QAAO,SAAUsB,GAAQ,MAAqB,WAAdA,EAAKlC,QAAsB,GAAG2B,WAAWvB,QAAO,SAAUC,EAAaC,GACrI,OAAOD,EAAcC,EAAQoB,SAC9B,IAIPjF,EAAK3C,UAAUiG,cAAgB,SAAUX,GAKrC,MAJsB,kBAATA,IACTA,EAAOA,EAAKA,MAGTpG,KAAKiF,OAAO2C,QAAO,SAAUsB,GAChC,QAA4F,IAAnFA,EAAKzD,QAAQmC,QAAO,SAAUzB,GAAU,OAAOA,EAAOC,OAASA,KAASN,WAClF,IAEPrC,EAAK3C,UAAUqI,eAAiB,SAAU/C,GAKtC,MAJsB,kBAATA,IACTA,EAAOA,EAAKA,MAGTpG,KAAKyE,SAAS2E,WAAU,SAAUjD,GAAU,OAAOA,EAAOC,OAASA,MAE9E3C,EAAK3C,UAAUgG,gBAAkB,SAAUV,GACvC,IAAID,EAASnG,KAAKyE,SAASzE,KAAKmJ,eAAe/C,IAC/C,GAAKD,EAIL,OAAOA,GAEX1C,EAAK3C,UAAU2F,mBAAqB,SAAU4C,GAE1C,IADA,IAAIC,EAAY,GACPC,EAAI,EAAGA,EAAIF,EAAMvD,OAAQyD,IAC9BD,EAAUD,EAAME,IAAMD,EAAUD,EAAME,IAAMD,EAAUD,EAAME,IAAM,EAAI,EAG1E,OADiBtJ,OAAOuJ,KAAKF,GAAWG,MAAK,SAAUC,EAAGvG,GAAK,OAAOmG,EAAUnG,GAAKmG,EAAUI,MAC7E,IAEtBzJ,OAAOO,eAAeiD,EAAK3C,UAAW,gBAAiB,CACnDJ,IAAK,WACD,OAAOV,KAAK6I,gBAEhBpI,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,oBAAqB,CACvDJ,IAAK,WACD,OAAOV,KAAK0E,oBAEhBjE,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,UAAW,CAC7CJ,IAAK,WACD,OAAOV,KAAKyE,UAEhBhE,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,QAAS,CAC3CJ,IAAK,WACD,OAAOV,KAAKiF,QAEhBxE,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,cAAe,CACjDJ,IAAK,WACD,OAAOV,KAAK0H,cAEhBjH,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,gBAAiB,CACnDJ,IAAK,WACD,OAAOV,KAAKwF,gBAEhB/E,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAeiD,EAAK3C,UAAW,aAAc,CAChDJ,IAAK,WACD,IAAIiJ,EAAQ3J,KAAKmJ,eAAenJ,KAAKwF,gBAIrC,OAHgB,MAAVmE,IACFA,EAAQ,GAEL3J,KAAKyE,SAASkF,IAEzBlJ,YAAY,EACZiC,cAAc,IAEXe,EA/Ue,CAgVxBC,EAASkG,cACXhJ,EAAQ6C,KAAOA,G,gCCtWfxD,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQiE,YAAS,EACjB,IAAIA,EAAwB,WACxB,SAASA,EAAOuB,GACZpG,KAAKiG,KAAO,GACZjG,KAAKoG,KAAOA,EAmBhB,OAjBAvB,EAAO/D,UAAU0G,QAAU,SAAUnB,GACjC,QAAKrG,KAAKiG,KAAK4D,SAASxD,IAO5BxB,EAAO/D,UAAU2G,WAAa,SAAUpB,GAEpC,GAAKrG,KAAKwH,QAAQnB,GAAlB,CAIA,IAAIkD,EAAIvJ,KAAKiG,KAAKmD,WAAU,SAAUU,GAAK,OAAOA,EAAE7I,QAAUoF,EAAKpF,OAAS6I,EAAEhI,QAAUuE,EAAKvE,SAC7F9B,KAAKiG,KAAK8D,OAAOR,EAAG,KAEjB1E,EAtBiB,GAwB5BjE,EAAQiE,OAASA,G,gCC1BjB,IAAImF,EAAmBhK,MAAQA,KAAKgK,iBAAoB,SAAUC,GAC9D,OAAQA,GAAOA,EAAIC,WAAcD,EAAM,CAAE,QAAWA,IAExDhK,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQ2E,UAAO,EACf,IAAI5B,EAASzC,EAAQ,IACjBiJ,EAAkBH,EAAgB9I,EAAQ,KAe9C,IAAIqE,EAAsB,WACtB,SAASA,IACLvF,KAAKoK,QAhBb,WAII,IAFA,IAAIC,EAAO,GAEFd,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIe,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAKpC,KAAK,IAAItE,EAAOvB,KAAKmH,EAAGe,IAMrC,OAHAD,EAAKpC,KAAK,IAAItE,EAAOvB,KAAK,IAAK,IAAIuB,EAAOvB,KAAK,KAE/C+H,EAAgBI,QAAQF,GACjBA,EAIYG,GA4BnB,OA1BAvK,OAAOO,eAAe+E,EAAKzE,UAAW,QAAS,CAC3CJ,IAAK,WACD,OAAOV,KAAKoK,SAEhB3J,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAe+E,EAAKzE,UAAW,SAAU,CAC5CJ,IAAK,WACD,OAAOV,KAAKoK,QAAQtE,QAExBrF,YAAY,EACZiC,cAAc,IAElB6C,EAAKzE,UAAUiF,KAAO,WAElB,IAAIM,EAAOrG,KAAKuG,MAAM,GAEtB,OADAvG,KAAKoK,QAAQK,QACNpE,GAEXd,EAAKzE,UAAU8F,cAAgB,WAE3B,IAAIL,EAAQvG,KAAKuG,MAEjB,OADAvG,KAAKoK,QAAU,GACR7D,GAEJhB,EA9Be,GAgC1B3E,EAAQ2E,KAAOA,G,gCCrDftF,OAAOO,eAAeI,EAAS,aAAc,CAAEK,OAAO,IACtDL,EAAQsE,UAAO,EACf,IAAIA,EAAsB,WACtB,SAASA,EAAKlB,EAAIgD,GACd,IAAI0D,EAAU1G,EAAG,GAAI2G,EAAU3G,EAAG,GAClChE,KAAKyE,SAAW,CAACiG,EAASC,GAC1B3K,KAAKgH,KAAOA,EA0BhB,OAxBA/G,OAAOO,eAAe0E,EAAKpE,UAAW,UAAW,CAC7CJ,IAAK,WACD,OAAOV,KAAKyE,UAEhBhE,YAAY,EACZiC,cAAc,IAElBzC,OAAOO,eAAe0E,EAAKpE,UAAW,aAAc,CAChDJ,IAAK,WACD,OAAOV,KAAK4K,aAEhBC,IAAK,SAAUtE,GACXvG,KAAK4K,YAAcrE,GAEvB9F,YAAY,EACZiC,cAAc,IAElBwC,EAAKpE,UAAUgK,QAAU,SAAUC,GAC/B,IAAIC,EAAY,CACZ3E,KAAM0E,EACNrC,OAAQqC,EAAM1J,cAElBrB,KAAK4K,YAAY3C,KAAK+C,IAEnB9F,EA9Be,GAgC1BtE,EAAQsE,KAAOA,G,iKC9BA,SAAS+F,EAAT,GAAiN,IAAhMC,EAA+L,EAA/LA,OAAQtC,EAAuL,EAAvLA,eAAgBuC,EAAuK,EAAvKA,WAAYC,EAA2J,EAA3JA,KAAMrC,EAAqJ,EAArJA,MAAOsC,EAA8I,EAA9IA,YAC7E,OACI,yBAAKC,UAAU,SAASC,MAAO,CAACC,WAAYN,EAAQ,UAAY,WAC5D,yBAAKI,UAAU,SAAf,wBAGA,yBAAKA,UAAU,WACX,6DAAmCvC,GACnC,gDAAsBqC,EAAO,OAAQ,SACrC,yDAA+BxC,EAAe9C,QAC9C,qDAA2BqF,EAAWrF,SAE1C,yBAAKwF,UAAU,iBACX,4CACA,yBAAKA,UAAU,yBACVD,EAAY7E,KAAI,SAAAH,GACb,OACA,yBAAKiF,UAAU,QACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,mBAOxF,yBAAK8I,UAAU,iBACX,wDACA,yBAAKA,UAAU,yBACVH,EAAW3E,KAAI,SAAAH,GACZ,OACA,yBAAKiF,UAAU,QACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,aAGlF,yBAAK8I,UAAU,kBACX,6BAAMjF,EAAKqC,eAM/B,yBAAK4C,UAAU,QACX,4BAAQK,QAAS,kBAAMC,OAAOC,SAASC,WAAvC,kBC3ChB,IAAMC,EAAU,IAAIC,IAEL,SAASvI,EAAT,GAA6E,IAAxDwI,EAAuD,EAA7DC,KAAoB9F,EAAyC,EAAzCA,KAExC+F,EAASC,qBAAWC,GAF6D,EAI/DC,qBAJ+D,mBAIhFJ,EAJgF,KAI1EK,EAJ0E,OAKzCD,mBAAiB,IALwB,mBAKhFE,EALgF,KAK/DC,EAL+D,OAMrCH,mBAAgE,UAN3B,mBAMhFI,EANgF,KAM7DC,EAN6D,OAOjDL,mBAAiB,IAPgC,mBAOhFM,EAPgF,KAOnEC,EAPmE,OAQvDP,mBAAiB,IARsC,mBAQhFQ,EARgF,KAQtEC,EARsE,OASrCT,mBAA4B,IATS,mBAShFU,EATgF,KAS7DC,EAT6D,OAU3CX,qBAV2C,mBAUhFY,EAVgF,KAUhEC,EAVgE,OAY3Db,qBAZ2D,mBAYhFnG,EAZgF,KAYxEiH,EAZwE,OAavDd,qBAbuD,mBAahFe,EAbgF,KAatEC,EAbsE,OAcrDhB,qBAdqD,mBAchFiB,EAdgF,KAcrEC,EAdqE,OAgBjElB,qBAhBiE,oBAgBhFmB,GAhBgF,MAgB3EC,GAhB2E,SAkBzCpB,mBAAmB,IAlBsB,qBAkBhFqB,GAlBgF,MAkB/DC,GAlB+D,MAoBjFC,GAAWC,iBAAuB,MAElCC,GAAa,SAACC,GAChBJ,IAAmB,SAAAK,GAAY,4BAAQA,GAAR,CAAsBD,OACrDE,YAAW,WACPL,GAASvG,QAAS6G,UAAYN,GAASvG,QAAS8G,aAAe,KAChE,IAGPC,qBAAU,WACN9B,EAAQN,GACRE,EAAOmC,GAAG,YAAY,YAAgH,IAAvGrC,EAAsG,EAA5GC,KAAoBqC,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,QAE/C,OADAjC,EAAQN,GACDsC,GACH,IAAK,WACDR,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,uBACV,MACJ,IAAK,WACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,gCACV,MACJ,IAAK,UACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,oDACV,MACJ,IAAK,iBACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,uBAAsChF,SAAOoN,EAAQnI,KAAK7D,QAA1D,YAAqEZ,SAAO4M,EAAQnI,KAAK5D,QAAzF,mCACV,MACJ,IAAK,WACDkK,EAAqB,UACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmB,CAACD,EAAQnI,WAC1D0H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,4BAA2ChF,SAAOoN,EAAQnI,KAAKA,KAAK7D,QAApE,YAA+EZ,SAAO4M,EAAQnI,KAAKA,KAAK5D,QAAxG,MACV,MACJ,IAAK,WACDkK,EAAqB,UACrBM,EAAqB,IACrBJ,EAAe,IACfkB,GAAW,8BAAD,OAA+BS,EAAQ1F,OAAO9B,KAA9C,0BAAoEwH,EAAQ5F,eAAe9C,OAA3F,gCAAyH0I,EAAQrD,WAAWrF,OAA5I,kBACV,MACJ,IAAK,aACD6G,EAAqB,QACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,+BACV,MACJ,IAAK,WACDuG,EAAqB,QACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,6BACV,MACJ,IAAK,mBACDuG,EAAqB,YACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,gCACV,MACJ,IAAK,sBACD6G,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,gCACV,MACJ,IAAK,kBACD6G,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,uCACV,MACJ,IAAK,mBACD+G,EAAkBqB,EAAQjI,OAC1BoG,EAAqB,aACrBoB,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,uCACV,MACJ,IAAK,kBACD2H,GAAW,GAAD,OAAIS,EAAQ3H,WAAZ,yBACV,MACJ,IAAK,mBACDkH,GAAW,GAAD,OAAIS,EAAQ3H,WAAZ,kCACV,MACJ,IAAK,UACDkF,EAAQ2C,OAAO,QACf3C,EAAQ2C,OAAO,QACfX,GAAW,sDAAD,OAAuDS,EAAQzF,MAA/D,sBAAkFyF,EAAQG,UAAY,4BAA8B,kCAApI,MACVjB,GAAO,CACHtC,KAAMoD,EAAQG,UACdzD,QAAQ,EACRnC,MAAOyF,EAAQzF,MACfH,eAAgBqD,EAAapD,eAC7BsC,WAAYc,EAAahH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YACtES,YAAaY,EAAavE,eAE9B,MACJ,IAAK,YACDqG,GAAW,kBACX,MACJ,IAAK,YACDA,GAAW,kBACX,MACJ,IAAK,WACDA,GAAW,iBACX,MACJ,IAAK,YACDA,GAAW,kBACX,MACJ,IAAK,cACDA,GAAW,GAAD,OAAIS,EAAQpI,KAAZ,wBACV,MACJ,IAAK,aACD2H,GAAW,GAAD,OAAIS,EAAQpI,KAAZ,sBACV,MACJ,IAAK,QACD2H,GAAW,UAAD,OAAWS,EAAQR,UAGrCa,QAAQC,IAAI,CAAE7C,eAAcsC,OAAMC,iBAEvC,IAEHH,qBAAU,WACNQ,QAAQC,IAAI,CAAC5C,OAAM/F,SAAQkH,WAAUE,cAClCrB,GAAM,WACL,IAAI/F,EAAS+F,EAAKzH,SAASmD,QAAO,SAAAmH,GAC9B,OAAOA,EAAQ3I,OAASA,KACzB,GAECiH,EAAWnB,EAAKzH,SAASmD,QAAO,SAAAmH,GAChC,QAAUA,EAAQ3I,OAASA,IAAS2I,EAAQ/H,OAASb,EAAOa,QAC7D,GAECuG,EAAYrB,EAAKzH,SAASmD,QAAO,SAAAmH,GACjC,QAASA,EAAQ/H,OAASb,EAAOa,SAGlCkF,EAAKzH,SAAS2E,WAAU,SAAA2F,GAAO,OAAIA,EAAQ3I,OAASA,KAAQ,GAC3DmH,EAAUyB,UAKd,IAFA,IAAIC,EAAiB/C,EAAKxH,mBAAmBoB,OAASoG,EAAKgD,kBAjBvD,WAmBI3F,GACJ0D,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBvC,EAAKxH,mBAAmByK,MAAM5F,EAAGA,EAAE0F,SADhF1F,EAAE,EAAEA,EAAE2C,EAAKxH,mBAAmBoB,OAAOyD,GAAG0F,EAAgB,EAAxD1F,GAIRwD,EAAYb,EAAKkD,uBACb1C,GAAmBC,EAAqBsC,EAAiB,EAAI,WAAa,UAC9E7B,EAAUjH,GACVmH,EAAYD,GACZG,EAAaD,GA3BR,KA6BV,CAACrB,IAEJ,IAgBMmD,GAA0B,SAAChJ,GAC7B,GAAMmG,EAAgBoC,MAAK,SAAA7D,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAAS,CAC/F,IAAI8M,EAAQ,YAAO9C,GACf+C,EAAYD,EAASlG,WAAU,SAAA2B,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAClG8M,EAASvF,OAAOwF,EAAW,GAC3B9C,EAAmB6C,QAEnB7C,GAAmB,SAAAgC,GAAS,4BAAQA,GAAR,CAAmBpI,QAYjDmJ,GAAsB,SAACnJ,GACzB,GAAMuG,EAAYgC,MAAK,SAAA7D,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAAS,CAC3F,IAAIiN,EAAQ,YAAO7C,GACf2C,EAAYE,EAASrG,WAAU,SAAA2B,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAClGiN,EAAS1F,OAAOwF,EAAW,GAC3B1C,EAAe4C,QAEf5C,GAAe,SAAA4B,GAAS,4BAAQA,GAAR,CAAmBpI,QAI7CqJ,GAAiB,WAChB9C,EAAY9G,OAAS,EACpBiI,GAAW,wBACiB,IAAvBnB,EAAY9G,OACjBiI,GAAW,eAEX5B,EAAO9G,KAAK,cAAe,CAACgB,KAAMuG,EAAY,MAgEtD,OAAIV,GAAS/F,GAAWkH,GAAaE,EAKjC,oCACI,yBAAKjC,UAAU,YACX,4CACiBnF,EAAOC,MAExB,+CACoBhF,SAAO8K,EAAKjI,eAAiB,SAEjD,8CACmBrC,SAAOsK,EAAKrG,cAAgB,oBAE/C,+CACoBqG,EAAK9G,OAEzB,+CACoBe,EAAOa,KAD3B,aAGA,6BACwB,YAAfkF,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB,8BAC1D,yBAAKwF,UAAU,kBACK,YAAfY,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB0G,EAAgBhG,KAAI,SAACH,EAAYsJ,GACvF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKA,UAAU,4BAA4BK,QAAS,kBAAM0D,GAAwBhJ,KAC9E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,WAKtE,YAAfQ,EAAK9G,QAAwB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,cAAtBsG,IACtE,oCACI,0DACCE,EAAYpG,KAAI,SAACH,EAAMsJ,GACpB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKA,UAAU,4BAA4BK,QAAS,kBAAM6D,GAAoBnJ,KAC1E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,cAStG,yBAAKJ,UAAU,cACX,4BAAQK,QAAS,WA1D9BC,OAAOiE,QAAQ,+CACd9D,EAAQ2C,OAAO,QACf3C,EAAQ2C,OAAO,QACf9C,OAAOC,SAASC,YAuDJ,qBAGZ,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,qBAAqB+B,EAASjH,MAC7C,yBAAKkF,UAAU,wBACV+B,EAASpH,KAAKO,KAAI,SAACsJ,EAAGH,GACnB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBACrB,yBAAKA,UAAU,OAAOG,IAAKC,YAM/C,yBAAKJ,UAAU,cACV+B,EAASrG,KADd,QAIJ,oCACCuG,EAAU/G,KAAI,SAACuJ,EAAUJ,GACtB,OAAQ,yBAAKC,IAAKD,EAAKrE,UAAS,mBAAcqE,IAC1C,yBAAKrE,UAAU,qBAAqByE,EAAS3J,MAC7C,yBAAKkF,UAAU,wBACVyE,EAAS9J,KAAKO,KAAI,SAACsJ,EAAGH,GACnB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBACrB,yBAAKA,UAAU,OAAOG,IAAKC,YAM/C,yBAAKJ,UAAU,cACVyE,EAAS/I,KADd,YAMR,yBAAKsE,UAAU,QAEX,yBAAKA,UAAU,YACX,6BACoB,YAAfY,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAAQ,4BAAQkF,UAAU,WAAWK,QAAS,WApNnIQ,EAAO9G,KAAK,iBAoNiF,SAE7E,6BACoB,WAAf6G,EAAK9G,OAAsC,WAAhBe,EAAOa,MAAqB,4BAAQsE,UAAU,WAAWK,QAAS,WAnNlHQ,EAAO9G,KAAK,cAAe,CAACc,aAmNgD,mBAE5D,6BACoB,YAAf+F,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB,4BAAQwF,UAAU,WAAWK,QAAS,WA/LpF,IAA3Ba,EAAgB1G,OACjBiI,GAAW,YAAD,OAAavB,EAAgB1G,OAA7B,4BAEVqG,EAAO9G,KAAK,aAAc,CAACc,SAAQI,MAAOiG,MA4LgC,uBAIlE,yBAAKlB,UAAU,kBACX,oCACoB,YAAfY,EAAK9G,OAAuBe,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACtD,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBAAsBK,QAAS,kBA5N/D,SAACtF,GACrBA,EAAK7D,SAAW0J,EAAMjI,cAAiBoC,EAAK5D,SAAWb,SAAOO,MAC/D4L,GAAW,aAAD,OAAc1H,EAAK5D,OAAnB,YAA6B4D,EAAK7D,OAAlC,6CAEV2J,EAAO9G,KAAK,wBAAyB,CAACgB,OAAMF,WAwN8C6J,CAAqB3J,KAC/E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,WAAfQ,EAAK9G,OAAsBe,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACrD,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,gBACrB,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiBK,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACnF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBAAsBK,QAAS,kBAAM0D,GAAwBhJ,KAClF,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,SAAgD,KAAvBe,EAAOF,KAAKH,SAAkBK,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,QAAwB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,cAAtBsG,IAAsCvG,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACzI,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,sBAAsBK,QAAS,kBAAM6D,GAAoBnJ,KACpE,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,SAAyB8G,EAAK1G,eAAeY,OAASD,EAAOC,SAAiC,cAAtBsG,IAAsCvG,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GAC7I,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,aAO9F,6BAC2B,cAAtBgB,KAAuCR,EAAK1G,eAAeY,OAASD,EAAOC,OACxE,oCACI,yBAAKkF,UAAU,kBAAkBY,EAAK1G,eAAeY,KAArD,0CACA,4BAAQkF,UAAU,WAAWK,QAAS,WAzMlC,IAAvBiB,EAAY9G,OACbiI,GAAW,mCAEX5B,EAAO9G,KAAK,YAAa,CAACgB,KAAMuG,EAAY,GAAIzG,WAChDwG,EAAqB,UACrBA,EAAqB,WAoMD,aACA,4BAAQrB,UAAU,WAAWK,QAAS,kBAhM9DQ,EAAO9G,KAAK,cAAe,CAACwB,WAAYV,EAAQC,YAChDuG,EAAqB,YA+LG,SAGQ,YAAfT,EAAK9G,OAA6C,SAAtBsH,GAAgCR,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,WAAtBsG,GAA6D,IAA3BR,EAAKgD,mBAC5I,oCACI,4BAAQ5D,UAAU,WAAWK,QAAS,kBAAM+D,OAA5C,QACA,4BAAQpE,UAAU,WAAWK,QAAS,WArP3DiB,EAAY9G,OAAS,EACpBiI,GAAW,mBAEX5B,EAAO9G,KAAK,sBAAuB,CAACkB,MAAOqG,MAkPvB,aACA,4BAAQtB,UAAU,WAAWK,QAAS,WA9OlC,IAAvBiB,EAAY9G,OACbiI,GAAW,0CAESnB,EAAYgC,MAAK,SAAAvI,GAAI,QAAMA,EAAK7D,SAAWoK,EAAY,GAAGpK,WAE1EuL,GAAW,qDAEX5B,EAAO9G,KAAK,kBAAmB,CAACkB,MAAOqG,MAuOvB,cAGQ,YAAfV,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,WAAtBsG,GAAkCR,EAAKgD,kBAAoB,GAChI,oCACI,4BAAQ5D,UAAU,WAAWK,QAAS,kBAAM+D,OAA5C,SAGQ,YAAfxD,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,SAAtBsG,GACrE,oCACI,4BAAQpB,UAAU,WAAWK,QAAS,WAnOlC,IAAvBiB,EAAY9G,OACbiI,GAAW,0BAEX5B,EAAO9G,KAAK,qBAAsB,CAACkB,MAAOqG,MAgOtB,SAGQ,YAAfV,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,aAAtBsG,GAAyE,oCAC1I,4BAAQpB,UAAU,WAAWK,QAAS,WA/OzDiB,EAAY9G,SAAWgH,EAAShH,OACjCiI,GAAW,YAAD,OAAajB,EAAShH,OAAtB,uBAA2C8G,EAAY9G,OAAvD,cAEVqG,EAAO9G,KAAK,yBAA0B,CAACkB,MAAOqG,MA4O1B,WAKhB,yBAAKtB,UAAU,uBACX,yBAAKA,UAAU,uBACK,YAAfY,EAAK9G,OAAuB8G,EAAKxE,aAAalB,KAAI,SAACH,EAAYsJ,GAC5D,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,iBAKpF,yBAAK8I,UAAU,uBACY,cAAtBoB,GAAqC,yBAAKpB,UAAU,SAAf,gBACf,cAAtBoB,GAAqCQ,GAAkBA,EAAe1G,KAAI,SAACH,EAAYsJ,GACpF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,iBAKpF,yBAAK8I,UAAU,cACM,YAAfY,EAAK9G,OAAsC,WAAf8G,EAAK9G,QAAuB8G,EAAK5G,SAAS8E,QAAQ5D,KAAI,SAACsJ,EAAQH,GACzF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBAAuBC,MAAO,CACnD,SAAY,WACZ,QAAW,EAAEoE,EACb,IAAO,IACP,KAAQ,IACR,UAAY,cAAZ,OAAiC,GAANA,EAA3B,wBAEA,yBAAKrE,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAU,eAK7C,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASiH,EAASjH,SACjE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASiH,EAASjH,QAAOI,KAAI,SAACH,EAAMsJ,GAClF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,SACrE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,QAAOI,KAAI,SAACH,EAAMsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,SACrE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,QAAOI,KAAI,SAACH,EAAMsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASD,EAAOC,SAC/D4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASD,EAAOC,QAAOI,KAAI,SAACH,EAAMsJ,GAChF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,kBAQtF,YAAf0J,EAAK9G,OACF,yBAAKkG,UAAU,eAC+D,IAAzEY,EAAKjH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YAAY9E,QAAgB,yBAAKwF,UAAU,eAAf,eAC9EY,EAAKjH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YAAYpE,KAAI,SAACH,EAAiBsJ,GACrF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKA,UAAU,sBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAM9E,YAAf0J,EAAK9G,OACF,yBAAKkG,UAAU,mBACqB,IAA/BY,EAAKrD,eAAe/C,QAAgB,yBAAKwF,UAAU,eAAf,mBACpCY,EAAKrD,eAAerC,KAAI,SAACsJ,EAAQH,GAC9B,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBAAuBC,MAAO,CACnD,SAAY,WACZ,QAAW,EAAEoE,EACb,IAAO,IACP,KAAQ,IACR,UAAY,cAAZ,OAAiC,GAANA,EAA3B,wBAEA,yBAAKrE,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAU,iBAQzD,yBAAK2E,IAAKpC,GAAUvC,UAAU,WACzBqC,GAAgBnH,KAAI,SAACwH,EAAiB2B,GACnC,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,mBACpB0C,OAKhBP,IAAO,kBAACxC,EAAD,CAAQC,OAAQuC,GAAIvC,OAAQtC,eAAgB6E,GAAI7E,eAAgBuC,WAAYsC,GAAItC,WAAYpC,MAAO0E,GAAI1E,MAAOqC,KAAMqC,GAAIrC,KAAMC,YAAaoC,GAAIpC,eApVpJ,2CC7RA,SAASJ,EAAT,GAAiN,IAAhMC,EAA+L,EAA/LA,OAAQtC,EAAuL,EAAvLA,eAAgBuC,EAAuK,EAAvKA,WAAYC,EAA2J,EAA3JA,KAAMrC,EAAqJ,EAArJA,MAAOsC,EAA8I,EAA9IA,YAC7E,OACI,yBAAKC,UAAU,SAASC,MAAO,CAACC,WAAYN,EAAQ,UAAY,WAC5D,yBAAKI,UAAU,SAAf,oDAGA,yBAAKA,UAAU,WACX,kEAAUvC,GACV,wEAAWqC,EAAO,eAAM,gBACxB,4DAASxC,EAAe9C,QACxB,8EAAYqF,EAAWrF,SAE3B,yBAAKwF,UAAU,iBACX,iDACA,yBAAKA,UAAU,yBACVD,EAAY7E,KAAI,SAAAH,GACb,OACA,yBAAKiF,UAAU,QACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,mBAOxF,yBAAK8I,UAAU,iBACX,mEACA,yBAAKA,UAAU,yBACVH,EAAW3E,KAAI,SAAAH,GACZ,OACA,yBAAKiF,UAAU,QACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,sBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,aAGlF,yBAAK8I,UAAU,kBACX,6BAAMjF,EAAKqC,eAM/B,yBAAK4C,UAAU,QACX,4BAAQK,QAAS,kBAAMC,OAAOC,SAASC,WAAvC,8BC3ChB,IAqCKoE,EArCCnE,EAAU,IAAIC,IAEdmE,EAAU,SAACC,GACb,OAAOA,GACH,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,EACD,MAAO,IACX,KAAK,GACD,MAAO,KACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,IACX,KAAK,GACD,MAAO,eACX,KAAK,GACD,MAAO,iBAYJ,SAAS3M,EAAT,GAA4E,EAA7DyI,KAA8D,IAA1C9F,EAAyC,EAAzCA,KAExC+F,EAASC,qBAAWC,GAF6D,EAI/DC,qBAJ+D,mBAIhFJ,EAJgF,KAI1EK,EAJ0E,OAKzCD,mBAAiB,IALwB,mBAKhFE,EALgF,KAK/DC,EAL+D,OAMrCH,mBAAgE,UAN3B,mBAMhFI,EANgF,KAM7DC,EAN6D,OAOjDL,mBAAiB,IAPgC,mBAOhFM,EAPgF,KAOnEC,EAPmE,OAQvDP,mBAAiB,IARsC,mBAQhFQ,EARgF,KAQtEC,EARsE,OASrCT,mBAA4B,IATS,mBAShFU,EATgF,KAS7DC,EAT6D,OAU3CX,qBAV2C,mBAUhFY,EAVgF,KAUhEC,EAVgE,OAY3Db,qBAZ2D,mBAYhFnG,EAZgF,KAYxEiH,EAZwE,OAavDd,qBAbuD,mBAahFe,EAbgF,KAatEC,EAbsE,OAcrDhB,qBAdqD,mBAchFiB,EAdgF,KAcrEC,EAdqE,QAgBzClB,mBAAmB,IAhBsB,qBAgBhFqB,GAhBgF,MAgB/DC,GAhB+D,SAkBjEtB,qBAlBiE,qBAkBhFmB,GAlBgF,MAkB3EC,GAlB2E,MAoBjFG,GAAWC,iBAAuB,MAElCC,GAAa,SAACC,GAChBJ,IAAmB,SAAAK,GAAY,4BAAQA,GAAR,CAAsBD,OACrDE,YAAW,WACPL,GAASvG,QAAS6G,UAAYN,GAASvG,QAAS8G,aAAe,KAChE,IAGPC,qBAAU,WACNlC,EAAOmC,GAAG,YAAY,YAAgH,IAAvGrC,EAAsG,EAA5GC,KAAoBqC,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,QAE/C,OADAjC,EAAQN,GACDsC,GACH,IAAK,WACDR,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,yCACV,MACJ,IAAK,WACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,mCACV,MACJ,IAAK,UACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,+CACV,MACJ,IAAK,iBACD2H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,iBAA2B8J,EAAQ1B,EAAQnI,KAAK5D,SAAhD,OAA0D0N,EAAQ3B,EAAQnI,KAAK7D,QAA/E,+CACV,MACJ,IAAK,WACDmK,EAAqB,UACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmB,CAACD,EAAQnI,WAC1D0H,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,6BAA6B8J,EAAQ1B,EAAQnI,KAAKA,KAAK5D,SAAvD,OAAiE0N,EAAQ3B,EAAQnI,KAAKA,KAAK7D,QAA3F,MACV,MACJ,IAAK,WACDmK,EAAqB,UACrBM,EAAqB,IACrBJ,EAAe,IACfkB,GAAW,GAAD,OAA4B,WAAxBS,EAAQ1F,OAAO9B,KAAoB,eAAO,eAA9C,4DAA8DwH,EAAQ5F,eAAe9C,OAArF,yCAAiI,IAA9B0I,EAAQrD,WAAWrF,OAAe,SAAlC,gBAA4C0I,EAAQrD,WAAWrF,OAA/D,4DAC7G,MACJ,IAAK,aACD6G,EAAqB,QACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,iEACV,MACJ,IAAK,WACDuG,EAAqB,QACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,2DACV,MACJ,IAAK,mBACDuG,EAAqB,YACrBM,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,qDACV,MACJ,IAAK,sBACD6G,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,2DACV,MACJ,IAAK,kBACD6G,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBD,EAAQjI,WACzDwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,yCACV,MACJ,IAAK,mBACDuG,EAAqB,aACrBQ,EAAkBqB,EAAQjI,OAC1BwH,GAAW,GAAD,OAAIS,EAAQrI,OAAOC,KAAnB,+FACV,MACJ,IAAK,kBACD2H,GAAW,GAAD,OAAIS,EAAQ3H,WAAZ,mCACV,MACJ,IAAK,mBACDkH,GAAW,GAAD,OAAIS,EAAQ3H,WAAZ,yCACV,MACJ,IAAK,UACDkF,EAAQ2C,OAAO,QACf3C,EAAQ2C,OAAO,QACfX,GAAW,yGAAD,OAAqBS,EAAQzF,MAA7B,uBAAuCyF,EAAQG,UAAY,yDAAc,qDACnFjB,GAAO,CACHtC,KAAMoD,EAAQG,UACdzD,QAAQ,EACRnC,MAAOyF,EAAQzF,MACfH,eAAgBqD,EAAapD,eAC7BsC,WAAYc,EAAahH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YACtES,YAAaY,EAAavE,eAE9B,MACJ,IAAK,YACDqG,GAAW,kCACX,MACJ,IAAK,YACDA,GAAW,4EACX,MACJ,IAAK,WACDA,GAAW,kFACX,MACJ,IAAK,YACDA,GAAW,wCACX,MACJ,IAAK,cACDA,GAAW,GAAD,OAAIS,EAAQpI,KAAZ,+CACV,MACJ,IAAK,aACD2H,GAAW,GAAD,OAAIS,EAAQpI,KAAZ,+CACV,MACJ,IAAK,QACD2H,GAAW,qBAAD,OAAOS,EAAQR,UAGjCa,QAAQC,IAAI,CAAE7C,eAAcsC,OAAMC,iBAEvC,IAEHH,qBAAU,WACHnC,GAAM,WACL,IAAI/F,EAAS+F,EAAKzH,SAASmD,QAAO,SAAAmH,GAC9B,OAAOA,EAAQ3I,OAASA,KACzB,GAECiH,EAAWnB,EAAKzH,SAASmD,QAAO,SAAAmH,GAChC,QAAUA,EAAQ3I,OAASA,IAAS2I,EAAQ/H,OAASb,EAAOa,QAC7D,GAECuG,EAAYrB,EAAKzH,SAASmD,QAAO,SAAAmH,GACjC,QAASA,EAAQ/H,OAASb,EAAOa,SAGlCkF,EAAKzH,SAAS2E,WAAU,SAAA2F,GAAO,OAAIA,EAAQ3I,OAASA,KAAQ,GAC3DmH,EAAUyB,UAKd,IAFA,IAAIC,EAAiB/C,EAAKxH,mBAAmBoB,OAASoG,EAAKgD,kBAjBvD,WAmBI3F,GACJ0D,GAAqB,SAAAwB,GAAS,4BAAQA,GAAR,CAAmBvC,EAAKxH,mBAAmByK,MAAM5F,EAAGA,EAAE0F,SADhF1F,EAAE,EAAEA,EAAE2C,EAAKxH,mBAAmBoB,OAAOyD,GAAG0F,EAAgB,EAAxD1F,GAIRwD,EAAYb,EAAKkD,uBACb1C,GAAmBC,EAAqBsC,EAAiB,EAAI,WAAa,UAC9E7B,EAAUjH,GACVmH,EAAYD,GACZG,EAAaD,GA3BR,KA6BV,CAACrB,IAEJ,IAgBMmD,GAA0B,SAAChJ,GAC7B,GAAMmG,EAAgBoC,MAAK,SAAA7D,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAAS,CAC/F,IAAI8M,EAAQ,YAAO9C,GACf+C,EAAYD,EAASlG,WAAU,SAAA2B,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAClG8M,EAASvF,OAAOwF,EAAW,GAC3B9C,EAAmB6C,QAEnB7C,GAAmB,SAAAgC,GAAS,4BAAQA,GAAR,CAAmBpI,QAYjDmJ,GAAsB,SAACnJ,GACzB,GAAMuG,EAAYgC,MAAK,SAAA7D,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAAS,CAC3F,IAAIiN,EAAQ,YAAO7C,GACf2C,EAAYE,EAASrG,WAAU,SAAA2B,GAAK,OAAIA,EAAMtI,SAAW4D,EAAK5D,QAAUsI,EAAMvI,SAAW6D,EAAK7D,UAClGiN,EAAS1F,OAAOwF,EAAW,GAC3B1C,EAAe4C,QAEf5C,GAAe,SAAA4B,GAAS,4BAAQA,GAAR,CAAmBpI,QAI7CqJ,GAAiB,WAChB9C,EAAY9G,OAAS,EACpBiI,GAAW,gEACiB,IAAvBnB,EAAY9G,OACjBiI,GAAW,sEAEX5B,EAAO9G,KAAK,cAAe,CAACgB,KAAMuG,EAAY,MA+DtD,OAAIV,GAAS/F,GAAWkH,GAAaE,EAKjC,oCACI,yBAAKjC,UAAU,YACX,kDACQnF,EAAOC,MAEf,kDACQ+J,EAAQjE,EAAKjI,eAAiB,UAEtC,wDACSiM,EAAQhE,EAAKrG,cAAgB,gBAEtC,8DACyB,YAAfqG,EAAK9G,MAAsB,eAAsB,WAAf8G,EAAK9G,MAAqB,eAAsB,YAAf8G,EAAK9G,MAAsB,eAAO,gBAE/G,4CACuB,WAAhBe,EAAOa,KAAoB,eAAO,eADzC,UAGA,6BACwB,YAAfkF,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB,6CAC1D,yBAAKwF,UAAU,kBACK,YAAfY,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB0G,EAAgBhG,KAAI,SAACH,EAAYsJ,GACvF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKA,UAAU,4BAA4BK,QAAS,kBAAM0D,GAAwBhJ,KAC9E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,WAKtE,YAAfQ,EAAK9G,QAAwB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,cAAtBsG,IACtE,oCACI,qEACCE,EAAYpG,KAAI,SAACH,EAAMsJ,GACpB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKA,UAAU,4BAA4BK,QAAS,kBAAM6D,GAAoBnJ,KAC1E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,eAU9G,yBAAKJ,UAAU,cACX,4BAAQK,QAAS,WA3DtBC,OAAOiE,QAAQ,8EACd9D,EAAQ2C,OAAO,QACf3C,EAAQ2C,OAAO,QACf9C,OAAOC,SAASC,YAwDZ,6BAEJ,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,qBAAqB+B,EAASjH,MAC7C,yBAAKkF,UAAU,wBACV+B,EAASpH,KAAKO,KAAI,SAACsJ,EAAGH,GACnB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBACrB,yBAAKA,UAAU,OAAOG,IAAKC,YAM/C,yBAAKJ,UAAU,cACQ,WAAlB+B,EAASrG,KAAoB,eAAO,iBAG7C,oCACCuG,EAAU/G,KAAI,SAACuJ,EAAUJ,GACtB,OAAQ,yBAAKC,IAAKD,EAAKrE,UAAS,mBAAcqE,IAC1C,yBAAKrE,UAAU,qBAAqByE,EAAS3J,MAC7C,yBAAKkF,UAAU,wBACVyE,EAAS9J,KAAKO,KAAI,SAACsJ,EAAGH,GACnB,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBACrB,yBAAKA,UAAU,OAAOG,IAAKC,YAM/C,yBAAKJ,UAAU,cACQ,WAAlByE,EAAS/I,KAAoB,eAAO,qBAKjD,yBAAKsE,UAAU,QAEX,yBAAKA,UAAU,YACX,6BACoB,YAAfY,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAAQ,4BAAQkF,UAAU,WAAWK,QAAS,WAnNnIQ,EAAO9G,KAAK,iBAmNiF,iBAE7E,6BACoB,WAAf6G,EAAK9G,OAAsC,WAAhBe,EAAOa,MAAqB,4BAAQsE,UAAU,WAAWK,QAAS,WAlNlHQ,EAAO9G,KAAK,cAAe,CAACc,aAkNgD,uBAE5D,6BACoB,YAAf+F,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiB,4BAAQwF,UAAU,WAAWK,QAAS,WA9LpF,IAA3Ba,EAAgB1G,OACjBiI,GAAW,qEAAD,OAAevB,EAAgB1G,OAA/B,mBAEVqG,EAAO9G,KAAK,aAAc,CAACc,SAAQI,MAAOiG,MA2LgC,kBAIlE,yBAAKlB,UAAU,kBACX,oCACoB,YAAfY,EAAK9G,OAAuBe,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACtD,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBAAsBK,QAAS,kBA3N/D,SAACtF,GACrBA,EAAK7D,SAAW0J,EAAMjI,cAAiBoC,EAAK5D,SAAWb,SAAOO,MAC/D4L,GAAW,4BAAD,OAASmC,EAAQ7J,EAAK5D,SAAtB,OAAgC0N,EAAQ9J,EAAK7D,QAA7C,4DAEV2J,EAAO9G,KAAK,wBAAyB,CAACgB,OAAMF,WAuN8C6J,CAAqB3J,KAC/E,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,WAAfQ,EAAK9G,OAAsBe,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACrD,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,gBACrB,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,OAA8C,KAAvBe,EAAOF,KAAKH,QAAiBK,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACnF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKsE,IAAKD,EAAKrE,UAAU,sBAAsBK,QAAS,kBAAM0D,GAAwBhJ,KAClF,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,SAAgD,KAAvBe,EAAOF,KAAKH,SAAkBK,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,QAAwB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,cAAtBsG,IAAsCvG,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GACzI,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,sBAAsBK,QAAS,kBAAM6D,GAAoBnJ,KACpE,yBAAKiF,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,YAM1F,oCACoB,YAAfQ,EAAK9G,SAAyB8G,EAAK1G,eAAeY,OAASD,EAAOC,SAAiC,cAAtBsG,IAAsCvG,EAAOF,KAAKO,KAAI,SAACH,EAAYsJ,GAC7I,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKA,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,SAAWiJ,IAAKC,aAO9F,6BAC2B,cAAtBgB,KAAuCR,EAAK1G,eAAeY,OAASD,EAAOC,OACxE,oCACI,yBAAKkF,UAAU,kBAAkBY,EAAK1G,eAAeY,KAArD,8FACA,4BAAQkF,UAAU,WAAWK,QAAS,WAxMlC,IAAvBiB,EAAY9G,OACbiI,GAAW,uEAEX5B,EAAO9G,KAAK,YAAa,CAACgB,KAAMuG,EAAY,GAAIzG,WAChDwG,EAAqB,WAoMD,gBACA,4BAAQrB,UAAU,WAAWK,QAAS,kBAhM9DQ,EAAO9G,KAAK,cAAe,CAACwB,WAAYV,EAAQC,YAChDuG,EAAqB,YA+LG,uBAGQ,YAAfT,EAAK9G,OAA6C,SAAtBsH,GAAgCR,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,WAAtBsG,GAA6D,IAA3BR,EAAKgD,mBAC5I,oCACI,4BAAQ5D,UAAU,WAAWK,QAAS,kBAAM+D,OAA5C,gBACA,4BAAQpE,UAAU,WAAWK,QAAS,WApP3DiB,EAAY9G,OAAS,EACpBiI,GAAW,kFAEX5B,EAAO9G,KAAK,sBAAuB,CAACkB,MAAOqG,MAiPvB,4BACA,4BAAQtB,UAAU,WAAWK,QAAS,WA7OlC,IAAvBiB,EAAY9G,OACbiI,GAAW,uEAESnB,EAAYgC,MAAK,SAAAvI,GAAI,QAAMA,EAAK7D,SAAWoK,EAAY,GAAGpK,WAE1EuL,GAAW,6EAEX5B,EAAO9G,KAAK,kBAAmB,CAACkB,MAAOqG,MAsOvB,iBAGQ,YAAfV,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,WAAtBsG,GAAkCR,EAAKgD,kBAAoB,GAChI,oCACI,4BAAQ5D,UAAU,WAAWK,QAAS,kBAAM+D,OAA5C,iBAGQ,YAAfxD,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,SAAtBsG,GACrE,oCACI,4BAAQpB,UAAU,WAAWK,QAAS,WAlOlC,IAAvBiB,EAAY9G,OACbiI,GAAW,+CAEX5B,EAAO9G,KAAK,qBAAsB,CAACkB,MAAOqG,MA+NtB,iBAGQ,YAAfV,EAAK9G,OAAuB8G,EAAK1G,eAAeY,OAASD,EAAOC,MAA8B,aAAtBsG,GAAyE,oCAC1I,4BAAQpB,UAAU,WAAWK,QAAS,WA9OzDiB,EAAY9G,SAAWgH,EAAShH,OACjCiI,GAAW,2BAAD,OAAQjB,EAAShH,OAAjB,6EAAqC8G,EAAY9G,OAAjD,uBAEVqG,EAAO9G,KAAK,yBAA0B,CAACkB,MAAOqG,MA2O1B,+BAKhB,yBAAKtB,UAAU,uBACX,yBAAKA,UAAU,uBACK,YAAfY,EAAK9G,OAAuB,yBAAKkG,UAAU,SAAf,gBACb,YAAfY,EAAK9G,OAAuB8G,EAAKxE,aAAalB,KAAI,SAACH,EAAYsJ,GAC5D,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,iBAKpF,yBAAK8I,UAAU,uBACY,cAAtBoB,GAAqC,yBAAKpB,UAAU,SAAf,gBACf,cAAtBoB,GAAqCQ,GAAkBA,EAAe1G,KAAI,SAACH,EAAYsJ,GACpF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,iBACrB,yBAAKA,UAAU,gBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAK5D,QAAjB,YAA4BrB,SAAOiF,EAAK7D,iBAKpF,yBAAK8I,UAAU,aACVY,EAAK5G,UAAY4G,EAAK5G,SAAS8E,QAAQ5D,KAAI,SAACsJ,EAAQH,GACjD,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBAAuBC,MAAO,CACnD,SAAY,WACZ,QAAW,EAAEoE,EACb,IAAO,IACP,KAAQ,IACR,UAAY,cAAZ,OAAiC,GAANA,EAA3B,wBAEA,yBAAKrE,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAU,eAK7C,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,iBACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASiH,EAASjH,SACjE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASiH,EAASjH,QAAOI,KAAI,SAACH,EAAMsJ,GAClF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,SACrE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,QAAOI,KAAI,SAACH,EAAMsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,SACrE4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASmH,EAAU,GAAGnH,QAAOI,KAAI,SAACH,EAAMsJ,GACtF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAOlG,yBAAK8I,UAAU,aACV0B,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASD,EAAOC,SAC/D4G,EAAkB4B,MAAK,SAAArI,GAAK,OAAIA,EAAM,GAAG2B,SAAS9B,OAASD,EAAOC,QAAOI,KAAI,SAACH,EAAMsJ,GAChF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,kBAQtF,YAAf0J,EAAK9G,OACF,yBAAKkG,UAAU,eAC+D,IAAzEY,EAAKjH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YAAY9E,QAAgB,yBAAKwF,UAAU,eAAf,eAC9EY,EAAKjH,OAAO2J,MAAK,SAAA1F,GAAI,MAAkB,WAAdA,EAAKlC,QAAoB4D,YAAYpE,KAAI,SAACH,EAAiBsJ,GACrF,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,wBACrB,yBAAKA,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAS,UAAK1J,SAAOyE,EAAKA,KAAK5D,QAAtB,YAAiCrB,SAAOiF,EAAKA,KAAK7D,iBAM9E,YAAf0J,EAAK9G,OACF,yBAAKkG,UAAU,mBACqB,IAA/BY,EAAKrD,eAAe/C,QAAgB,yBAAKwF,UAAU,eAAf,mBACpCY,EAAKrD,eAAerC,KAAI,SAACsJ,EAAQH,GAC9B,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,uBAAuBC,MAAO,CACnD,SAAY,WACZ,QAAW,EAAEoE,EACb,IAAO,IACP,KAAQ,IACR,UAAY,cAAZ,OAAiC,GAANA,EAA3B,wBAEA,yBAAKrE,UAAU,uBACX,yBAAKG,IAAKC,IAAKJ,UAAU,iBAQzD,yBAAK2E,IAAKpC,GAAUvC,UAAU,WACzBqC,GAAgBnH,KAAI,SAACwH,EAAiB2B,GACnC,OACI,yBAAKC,IAAKD,EAAKrE,UAAU,mBACpB0C,OAKhBP,IAAO,kBAAC,EAAD,CAAevC,OAAQuC,GAAIvC,OAAQtC,eAAgB6E,GAAI7E,eAAgBuC,WAAYsC,GAAItC,WAAYpC,MAAO0E,GAAI1E,MAAOqC,KAAMqC,GAAIrC,KAAMC,YAAaoC,GAAIpC,eArV3J,uD,SA7RV6E,O,kCAAAA,I,kCAAAA,I,kCAAAA,I,kCAAAA,I,uBAAAA,M,KCtCL,IAAMnE,EAAU,IAAIC,IAEL,SAASqE,IAEpB,IAAMlE,EAASC,qBAAWC,GAFC,EAIHC,qBAJG,mBAIpBlG,EAJoB,KAIdkK,EAJc,OAKHhE,mBAA8B,UAL3B,mBAKpBtF,EALoB,KAKduJ,EALc,OAMHjE,qBANG,mBAMpBkE,EANoB,KAMdC,EANc,OAOHnE,mBAAwBP,EAAQrL,IAAI,SAAW,OAP5C,mBAOpBgQ,EAPoB,KAOdC,EAPc,OASarE,mBAAiB,KAT9B,mBASpBrI,EAToB,KASN2M,EATM,OAWHtE,oBAA2B,GAXxB,mBAWpBJ,EAXoB,KAWdK,EAXc,OAaGD,oBAAyB,GAb5B,mBAapBuE,EAboB,KAaXC,EAbW,OAcGxE,oBAAkB,GAdrB,mBAcpByE,EAdoB,KAcXC,EAdW,KAgBrBC,EAAQnD,iBAAuB,MAC/BoD,EAAUpD,iBAAsB,OAChCqD,EAAUrD,mBACVsD,EAAUtD,mBAQhBO,qBAAU,WACNlC,EAAOmC,GAAG,aAAa,YAA6B,IAA3BpC,EAA0B,EAA1BA,KANzBH,EAAQlB,IAAI,OAAQsG,EAAQ7J,SAC5ByE,EAAQlB,IAAI,OAAQuG,EAAQ9J,SAC5ByE,EAAQlB,IAAI,OAAQqG,EAAQ5J,SAMxBiF,EAAQL,MAGZC,EAAOmC,GAAG,YAAY,SAACkC,GACnBM,EAAWN,MAGfrE,EAAOmC,GAAG,cAAc,SAACkC,GACrBM,EAAWN,MAGfrE,EAAOmC,GAAG,QAAQ,SAAC+C,GACf,GAAIJ,EAAM3J,QACV,OAAO+J,GACH,IAAK,YACDJ,EAAM3J,QAASgK,UAAiC,QAApBJ,EAAQ5J,QAAoB,8CAAgD,6FACxG,MACJ,IAAK,OACD2J,EAAM3J,QAASgK,UAAiC,QAApBJ,EAAQ5J,QAAoB,qBAAuB,yDAC/E,MACJ,IAAK,UACD2J,EAAM3J,QAASgK,UAAiC,QAApBJ,EAAQ5J,QAAoB,gCAAkC,qEAC1F,MACJ,IAAK,YACD2J,EAAM3J,QAASgK,UAAiC,QAApBJ,EAAQ5J,QAAoB,kDAAoD,+GAIzH,IAyBH,OAAG4E,EACa,QAATwE,EACQ,kBAACjN,EAAD,CAAMyI,KAAMA,EAAoB9F,KAAMA,IAEtC,kBAAC,EAAD,CAAa8F,KAAMA,EAAoB9F,KAAMA,IAIzDyK,EAEK,yBAAKvF,UAAU,kBACX,yBAAKA,UAAU,eACX,4BAAQlF,KAAK,WAAWmL,aAAcb,EAAMc,SAAU,SAAAH,GAAMV,EAAQU,EAAEI,OAAOxQ,OAAyBiQ,EAAQ5J,QAAU+J,EAAEI,OAAOxQ,MAAwB8K,EAAQlB,IAAI,OAAQwG,EAAEI,OAAOxQ,SAClL,4BAAQA,MAAM,OAAd,WACA,4BAAQA,MAAM,OAAd,kBAGR,yBAAKqK,UAAU,aACD,QAAToF,EAAA,0BAAuD,kBAAXG,GAAyBA,EAAQzK,MAA7E,wCAAiH,kBAAXyK,GAAyBA,EAAQzK,KAAvI,WAEL,yBAAKkF,UAAU,cAGf,yBAAKA,UAAU,gBACS,kBAAXuF,GAAyBA,EAAQpL,QAAQe,KAAI,SAAAL,GAClD,GAAGA,EAAOC,OAASA,EACf,OACI,yBAAKwJ,IAAI,IAAItE,UAAU,eACnB,yBAAKA,UAAU,QAAO,+BAAiB,QAAToF,EAAiB,OAAS,gBAAa,yBAAKpF,UAAU,SAAS,UAAoBnF,EAAOC,KAAlB,QAATsK,EAAA,iCAC7F,yBAAKpF,UAAU,QAAO,+BAAiB,QAAToF,EAAiB,OAAS,gBAAa,yBAAKpF,UAAU,SAAyB,WAAhBnF,EAAOa,KAA6B,QAAT0J,EAAiB,SAAW,eAAgB,QAATA,EAAiB,SAAW,iBACvL,yBAAKpF,UAAWnF,EAAO4K,QAAU,QAAU,aAAa,+BAAiB,QAATL,EAAiB,SAAW,gBAAa,yBAAKpF,UAAU,SAASnF,EAAO4K,QAAmB,QAATL,EAAiB,QAAU,2BAAkB,QAATA,EAAiB,YAAc,iCAIjN,kBAAXG,GAAyBA,EAAQpL,QAAQe,KAAI,SAAAL,GAClD,GAAKA,EAAOC,OAASA,EACjB,OACI,yBAAKwJ,IAAKzJ,EAAOC,KAAMkF,UAAU,eAC7B,yBAAKA,UAAU,QAAO,+BAAiB,QAAToF,EAAiB,OAAS,gBAAa,yBAAKpF,UAAU,SAASnF,EAAOC,OACpG,yBAAKkF,UAAU,QAAO,+BAAiB,QAAToF,EAAiB,OAAS,gBAAa,yBAAKpF,UAAU,SAAyB,WAAhBnF,EAAOa,KAA6B,QAAT0J,EAAiB,SAAW,eAAgB,QAATA,EAAiB,SAAW,iBACvL,yBAAKpF,UAAWnF,EAAO4K,QAAU,QAAU,aAAa,+BAAiB,QAATL,EAAiB,SAAW,gBAAa,yBAAKpF,UAAU,SAASnF,EAAO4K,QAAmB,QAATL,EAAiB,QAAU,2BAAkB,QAATA,EAAiB,YAAc,kCAKzO,yBAAKpF,UAAU,iBACX,4BAAQiG,aAAcnQ,SAAOsQ,IAAKtL,KAAK,eAAeoL,SAAU,SAAAH,GAAC,OAAIT,EAAgBS,EAAEI,OAAOxQ,SAC1F,4BAAQA,MAAOG,SAAOsQ,KAAtB,KACA,4BAAQzQ,MAAOG,SAAOuQ,OAAtB,KACA,4BAAQ1Q,MAAOG,SAAOwQ,MAAtB,KACA,4BAAQ3Q,MAAOG,SAAOK,MAAtB,KACA,4BAAQR,MAAOG,SAAOyQ,KAAtB,KACA,4BAAQ5Q,MAAOG,SAAO0Q,OAAtB,KACA,4BAAQ7Q,MAAOG,SAAO2Q,OAAtB,KACA,4BAAQ9Q,MAAOG,SAAO4Q,MAAtB,KACA,4BAAQ/Q,MAAOG,SAAOM,KAAtB,MACA,4BAAQT,MAAOG,SAAO6Q,MAAtB,KACA,4BAAQhR,MAAOG,SAAO8Q,OAAtB,KACA,4BAAQjR,MAAOG,SAAOO,MAAtB,KACA,4BAAQV,MAAOG,SAAO+Q,KAAtB,KACA,4BAAQlR,MAAO,SAAf,WAGR,yBAAKqK,UAAU,gBACX,4BAAQA,UAAWyF,EAAU,QAAU,YAAapF,QAAS,WAtEtEkF,IACC1E,EAAO9G,KAAK,cAAepB,GAC3B+M,GAAYD,MAoE+EA,EAAmB,QAATL,EAAiB,gBAAmB,iCAAmB,QAATA,EAAiB,YAAe,oCAOvL,yBAAKpF,UAAU,kBACX,yBAAKA,UAAU,eACX,4BAAQlF,KAAK,WAAWmL,aAAcb,EAAMc,SAAU,SAAAH,GAAMV,EAAQU,EAAEI,OAAOxQ,OAAyBiQ,EAAQ5J,QAAU+J,EAAEI,OAAOxQ,MAAwB8K,EAAQlB,IAAI,OAAQwG,EAAEI,OAAOxQ,SAClL,4BAAQA,MAAM,OAAd,WACA,4BAAQA,MAAM,OAAd,kBAGR,yBAAKqK,UAAU,kBACX,2BAAO8G,YAAsB,QAAT1B,EAAiB,OAAS,eAAMtK,KAAK,OAAOoL,SAAU,SAAAH,GAAMZ,EAAQY,EAAEI,OAAOxQ,OAAQmQ,EAAQ9J,QAAU+J,EAAEI,OAAOxQ,SACpI,2BAAOmR,YAAsB,QAAT1B,EAAiB,OAAS,eAAMtK,KAAK,OAAOoL,SAAU,SAAAH,GAAMf,EAAQe,EAAEI,OAAOxQ,OAAQkQ,EAAQ7J,QAAU+J,EAAEI,OAAOxQ,SACpI,4BAAQmF,KAAK,OAAOmL,aAAa,SAASC,SAAU,SAAAH,GAAC,OAAId,EAAQc,EAAEI,OAAOxQ,SACtE,4BAAQA,MAAM,UAAmB,QAATyP,EAAiB,iBAAmB,gBAC5D,4BAAQzP,MAAM,UAAmB,QAATyP,EAAiB,iBAAmB,iBAE5D,yBAAKpF,UAAU,QAAQ2E,IAAKgB,IAChC,4BAAQ1C,KAAK,SAAS5C,QAAS,SAAA0F,GAAC,OA7GvB,SAACA,GAClBA,EAAEgB,iBAEEjM,GAASY,GAASwJ,EAKnBpK,EAAKN,OAAS,GACbmL,EAAM3J,QAASgK,UAAqB,QAATZ,EAAiB,iDAAmD,6EAInGvE,EAAO9G,KAAK,UAAW,CAACe,OAAMY,OAAMwJ,SAThCS,EAAM3J,QAASgK,UAAqB,QAATZ,EAAiB,sCAAwC,yDAyG5C4B,CAAajB,KAAc,QAATX,EAAiB,UAAY,kBCzKnG,IAAM6B,EAAO3G,OAAOC,SAAS2G,OAAOC,QAAQ,QAAS,MAE/CtG,EAASuG,IAAeH,GAEjBlG,EAAgBsG,IAAMC,cAAqCzG,GAmElEJ,EAAU,IAAIC,IA8CL6G,MA5Cf,WAAgB,IAAD,EAEWvG,qBAFX,mBAENJ,EAFM,KAEAK,EAFA,KAoBb,OAhBA8B,qBAAU,WACR,IAAIjI,EAAO2F,EAAQrL,IAAI,QACnB8P,EAAOzE,EAAQrL,IAAI,QACnBgQ,EAAO3E,EAAQrL,IAAI,QAEvBmO,QAAQC,IAAI,CAAC1I,OAAMoK,OAAME,SAEtBtK,GAAQoK,GAAQE,GACjBvE,EAAO9G,KAAK,cAAe,CAACe,OAAMoK,SAGpCrE,EAAOmC,GAAG,eAAe,YAAiC,IAA/BpC,EAA8B,EAA9BA,KACzBK,EAAQL,QAET,IAEAA,EAEC,kBAACG,EAAcyG,SAAf,CAAwB7R,MAAOkL,GAC7B,yBAAKb,UAAU,OACb,yBAAKA,UAAU,WACX,yIAEqB,QAAxBS,EAAQrL,IAAI,QAAoB,kBAAC+C,EAAD,CAAMyI,KAAMA,EAAM9F,KAAM2F,EAAQrL,IAAI,UAAc,kBAAC,EAAD,CAAawL,KAAMA,EAAM9F,KAAM2F,EAAQrL,IAAI,YAMpI,kBAAC2L,EAAcyG,SAAf,CAAwB7R,MAAOkL,GAC7B,yBAAKb,UAAU,OACX,yBAAKA,UAAU,WACX,yIAEJ,kBAAC+E,EAAD,SC5GU0C,QACW,cAA7BnH,OAAOC,SAASmH,UAEe,UAA7BpH,OAAOC,SAASmH,UAEhBpH,OAAOC,SAASmH,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjF,QAAQiF,MAAMA,EAAM9F,c","file":"static/js/main.b50dc7b5.chunk.js","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./card\"), exports);\n__exportStar(require(\"./game\"), exports);\n","module.exports = __webpack_public_path__ + \"static/media/svg-cards.5d232435.svg\";","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./card.js\"), exports);\n__exportStar(require(\"./colors.js\"), exports);\n__exportStar(require(\"./values.js\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pointsHeld = exports.isJoker = exports.Values = void 0;\nvar Values;\n(function (Values) {\n    // Regular numberS\n    Values[Values[\"TWO\"] = 2] = \"TWO\";\n    Values[Values[\"THREE\"] = 3] = \"THREE\";\n    Values[Values[\"FOUR\"] = 4] = \"FOUR\";\n    Values[Values[\"FIVE\"] = 5] = \"FIVE\";\n    Values[Values[\"SIX\"] = 6] = \"SIX\";\n    Values[Values[\"SEVEN\"] = 7] = \"SEVEN\";\n    Values[Values[\"EIGHT\"] = 8] = \"EIGHT\";\n    Values[Values[\"NINE\"] = 9] = \"NINE\";\n    Values[Values[\"TEN\"] = 10] = \"TEN\";\n    // Non-number cards\n    Values[Values[\"JACK\"] = 11] = \"JACK\";\n    Values[Values[\"QUEEN\"] = 12] = \"QUEEN\";\n    Values[Values[\"KING\"] = 13] = \"KING\";\n    Values[Values[\"ACE\"] = 14] = \"ACE\";\n    // Joker\n    Values[Values[\"SMALL_JOKER\"] = 15] = \"SMALL_JOKER\";\n    Values[Values[\"BIG_JOKER\"] = 16] = \"BIG_JOKER\";\n})(Values = exports.Values || (exports.Values = {}));\nfunction isJoker(value) {\n    if (value === Values.SMALL_JOKER || value === Values.BIG_JOKER) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.isJoker = isJoker;\nfunction pointsHeld(value) {\n    if (value === Values.FIVE) {\n        return 5;\n    }\n    else if (value === Values.TEN || value === Values.KING) {\n        return 10;\n    }\n    else {\n        return 0;\n    }\n}\nexports.pointsHeld = pointsHeld;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidColor = exports.Colors = void 0;\nvar Colors;\n(function (Colors) {\n    Colors[Colors[\"HEART\"] = 1] = \"HEART\";\n    Colors[Colors[\"SPADE\"] = 2] = \"SPADE\";\n    Colors[Colors[\"CLUB\"] = 3] = \"CLUB\";\n    Colors[Colors[\"DIAMOND\"] = 4] = \"DIAMOND\";\n    Colors[Colors[\"JOKER\"] = 5] = \"JOKER\";\n})(Colors = exports.Colors || (exports.Colors = {}));\nfunction isValidColor(color) {\n    if (color === Colors.HEART || color === Colors.SPADE || color === Colors.CLUB || color === Colors.DIAMOND || color === Colors.JOKER) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexports.isValidColor = isValidColor;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Card = void 0;\nvar values_js_1 = require(\"./values.js\");\nvar colors_js_1 = require(\"./colors.js\");\nvar Card = /** @class */ (function () {\n    function Card(value, color) {\n        if (!values_js_1.isJoker(value) && !colors_js_1.isValidColor(color)) {\n            throw new Error('Every card must have a color!');\n        }\n        if (values_js_1.isJoker(value) && color && !(color === colors_js_1.Colors.JOKER)) {\n            throw new Error('Joker cards cannot have colors!');\n        }\n        this._value = value;\n        this._color = color || colors_js_1.Colors.JOKER;\n    }\n    Object.defineProperty(Card.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Card.prototype, \"color\", {\n        get: function () {\n            return this._color;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Card.prototype.isJoker = function () {\n        return values_js_1.isJoker(this.value);\n    };\n    Card.prototype.isSpecial = function () {\n        return (this.value === values_js_1.Values.FIVE || this.value === values_js_1.Values.TEN || this.value === values_js_1.Values.KING);\n    };\n    Card.prototype.isMaster = function (currentMasterColor, currentMasterNumber) {\n        if (this._color === currentMasterColor || this._color === colors_js_1.Colors.JOKER || this._value === currentMasterNumber) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    Card.prototype.pointsHeld = function () {\n        return values_js_1.pointsHeld(this.value);\n    };\n    Card.prototype.toString = function () {\n        return values_js_1.Values[this._value] + \" \" + (colors_js_1.Colors[this._color] || '');\n    };\n    return Card;\n}());\nexports.Card = Card;\n","\"use strict\";\n// Start the game here\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Game = void 0;\nvar events_1 = require(\"events\");\nvar card_1 = require(\"./card\");\nvar player_js_1 = require(\"./player.js\");\nvar deck_js_1 = require(\"./deck.js\");\nvar team_js_1 = require(\"./team.js\");\nvar Game = /** @class */ (function (_super) {\n    __extends(Game, _super);\n    // p1 and p2 ATTACKS; p3 and p4 DEFENDS\n    function Game(_a, masterNumber) {\n        var _b = _a[0], p1 = _b[0], p2 = _b[1], _c = _a[1], p3 = _c[0], p4 = _c[1];\n        var _this = _super.call(this) || this;\n        _this._players = [];\n        _this._currentRoundCards = [];\n        _this.roundCount = 0;\n        _this.masterNumber = masterNumber;\n        if (!p1 || !p2 || !p3 || !p4) {\n            throw Error('The game must be started with four players, with two on each team!');\n        }\n        var player_1 = new player_js_1.Player(p1);\n        var player_2 = new player_js_1.Player(p2);\n        var player_3 = new player_js_1.Player(p3);\n        var player_4 = new player_js_1.Player(p4);\n        _this._teams = [new team_js_1.Team([player_1, player_2], 'ATTACK'), new team_js_1.Team([player_3, player_4], 'DEFEND')];\n        _this._players = [player_1, player_2, player_3, player_4];\n        return _this;\n    }\n    Game.prototype.start = function () {\n        // Set game phase to drawing\n        this.phase = 'DRAWING';\n        this.emit('phaseChange', { phase: this.phase });\n        // Init draw pile\n        this.drawPile = new deck_js_1.Deck();\n        // Select starting player\n        this._currentPlayer = this.players[Math.floor(Math.random() * 4)];\n        // Skip drawing if master number is joker\n        if (this.masterNumber === 'JOKER') {\n            this.masterColor = card_1.Colors.JOKER;\n            while (this.drawPile.length > 6) {\n                this.draw();\n            }\n        }\n    };\n    Game.prototype.draw = function () {\n        // Check if phase is drawing\n        if (!(this.phase === 'DRAWING')) {\n            throw Error('You cannot draw cards at this point!');\n        }\n        // Draw card for current player\n        var card_drawn = this.drawPile.draw();\n        this._currentPlayer.hand = this._currentPlayer.hand.concat([card_drawn]);\n        // Emit draw event\n        this.emit('draw', { player: this._currentPlayer.name, card: card_drawn });\n        // Check if six cards will remain\n        if (this.drawPile.length === 6) {\n            // Check if master color is still to be decided\n            if (!this.masterColor) {\n                var colors_array = this.drawPile.cards.map(function (card) { return card.color; });\n                this.masterColor = this.findMostDuplicates(colors_array);\n            }\n            this.phase = 'TAKING';\n            // Emit event\n            this.emit('phaseChange', { phase: this.phase });\n        }\n        // Move to next player\n        this._currentPlayer = this.nextPlayer;\n    };\n    Game.prototype.setMasterColor = function (card) {\n        // Check if phase is drawing\n        if (!(this.phase === 'DRAWING')) {\n            throw Error('Master color can only be set while drawing!');\n        }\n        // Check if card is a master card\n        if (!(card.value === this.masterNumber)) {\n            throw Error('You cannot declare a master color with this card!');\n        }\n        this.masterColor = card.color;\n        // Distribute remaining cards\n        while (this.drawPile.length > 6) {\n            this.draw();\n        }\n    };\n    Game.prototype.takeRemaining = function (playerName) {\n        // Check if phase is taking\n        if (!(this.phase === 'TAKING')) {\n            throw Error('You cannot take remaining cards at this point!');\n        }\n        // Find player and give card\n        var player = this.getPlayerByName(playerName);\n        if (!player) {\n            throw Error('This player does not exist!');\n        }\n        if (!(this.getPlayerTeam(player).role === 'DEFEND')) {\n            throw Error('Only the defending team can take remaining cards!');\n        }\n        var cardsTaken = this.drawPile.takeRemaining();\n        player.hand = player.hand.concat(cardsTaken);\n        this.emit('cardtake', { player: player.name, cards: cardsTaken });\n        this.phase = 'PUTTING';\n        this.emit('phaseChange', { phase: this.phase });\n    };\n    Game.prototype.putDownHiddenCards = function (playerName, cardsToBePutDown) {\n        // Check if phase is putting\n        if (!(this.phase === 'PUTTING')) {\n            throw Error('You cannot put down hidden cards at this point!');\n        }\n        // Check if six cards are being put down\n        if (!(cardsToBePutDown.length === 6)) {\n            throw Error('You must put down six cards!');\n        }\n        // Check if cards carry more than 25 points\n        var totalPoints = cardsToBePutDown.reduce(function (accumulator, current) {\n            return accumulator + current.pointsHeld();\n        }, 0);\n        if (totalPoints > 25) {\n            throw Error('You can only put cards carrying a maximum of 25 points down!');\n        }\n        // Find player\n        var player = this.getPlayerByName(playerName);\n        if (!player) {\n            throw Error('This player does not exist!');\n        }\n        cardsToBePutDown.forEach(function (card) {\n            if (!player.hasCard) {\n                throw Error(\"Cannot find card \" + card.value + \" \" + card.color + \" on player \" + player.name + \"!\");\n            }\n        });\n        cardsToBePutDown.forEach(function (card) {\n            player.removeCard(card);\n        });\n        this._hiddenCards = cardsToBePutDown;\n        this.emit('cardput', { player: playerName, cards: cardsToBePutDown });\n        this.phase = 'PLAYING';\n        this.emit('phaseChange', { phase: this.phase });\n        var currentPlayer = this.getPlayerTeam(player).players.filter(function (player) { return !(player.name === playerName); })[0];\n        this.initRound(currentPlayer);\n    };\n    Game.prototype.play = function (cardToBePlayed) {\n        var _this = this;\n        // Throw error if four players have already played\n        if (this._currentRoundCards.length > 3) {\n            throw Error('Players can only play once every round!');\n        }\n        // Throw error if player does not have card\n        if (!this._currentPlayer.hasCard(cardToBePlayed)) {\n            throw Error(\"Current player \" + this._currentPlayer.name + \" does not have card \" + cardToBePlayed.toString() + \" at hand!\");\n        }\n        // Throw error if player has matching cards but did not play\n        if (((this._currentRoundCards.length > 0) && !((cardToBePlayed.color === this._currentRoundCards[0].card.color)) || (cardToBePlayed.isMaster(this.masterColor, this.masterNumber) && this._currentRoundCards[0].card.isMaster(this.masterColor, this.masterNumber)))) {\n            var has_matching = void 0;\n            if ((this._currentRoundCards.length > 0) && !this._currentRoundCards[0].card.isMaster(this.masterColor, this.masterNumber)) {\n                has_matching = !!this._currentPlayer.hand.filter(function (card) {\n                    if (!card.isMaster(_this.masterColor, _this.masterNumber)) {\n                        return card.color === _this._currentRoundCards[0].card.color;\n                    }\n                });\n            }\n            else if ((this._currentRoundCards.length > 0) && this._currentRoundCards[0].card.isMaster(this.masterColor, this.masterNumber)) {\n                has_matching = !!this._currentPlayer.hand.filter(function (card) {\n                    return card.isMaster(_this.masterColor, _this.masterNumber);\n                });\n            }\n            if ((this._currentRoundCards.length > 0) && has_matching) {\n                throw Error(\"You cannot play card \" + cardToBePlayed.toString() + \" because you have other matching cards!\");\n            }\n        }\n        this._currentRoundCards.push({\n            card: cardToBePlayed,\n            playedBy: this._currentPlayer\n        });\n        this._currentPlayer.removeCard(cardToBePlayed);\n        // Emit event\n        this.emit('cardplay', { player: this._currentPlayer.name, card: cardToBePlayed });\n        // Check if everyone has played\n        if (this._currentRoundCards.length === 4) {\n            this.cleanRound();\n        }\n        else {\n            this._currentPlayer = this.nextPlayer;\n        }\n    };\n    Game.prototype.initRound = function (player) {\n        this._currentPlayer = player;\n        this.roundCount++;\n    };\n    Game.prototype.cleanRound = function () {\n        var _this = this;\n        if (!(this._currentRoundCards.length === 4)) {\n            throw Error('Not everyone has played a card yet!');\n        }\n        // Find largest card in `_currentRoundCards`\n        var firstCard = this._currentRoundCards[0];\n        var largestCard = this._currentRoundCards.reduce(function (prevCard, currentCard) {\n            if ((currentCard.card.isMaster(_this.masterColor, _this.masterNumber) && !prevCard.card.isMaster(_this.masterColor, _this.masterNumber)) || ((currentCard.card.color === prevCard.card.color) && (currentCard.card.value > prevCard.card.value))) {\n                return currentCard;\n            }\n            else {\n                return prevCard;\n            }\n        });\n        var roundWinningTeam = this.getPlayerTeam(largestCard.playedBy);\n        // Find point-holding cards and add\n        if (roundWinningTeam.role === 'ATTACK') {\n            var cardsToAdd = this._currentRoundCards.map(function (playedCard) {\n                if (playedCard.card.isSpecial()) {\n                    return {\n                        card: playedCard.card,\n                        points: playedCard.card.pointsHeld()\n                    };\n                }\n            });\n            roundWinningTeam.ownedCards = roundWinningTeam.ownedCards.concat(cardsToAdd);\n        }\n        // Find cards not holding points and move to discarded pile\n        var discardedCards = this._currentRoundCards.map(function (playedCard) {\n            if (!(playedCard.card.isSpecial())) {\n                return playedCard;\n            }\n        });\n        this._discardedPile = this._discardedPile.concat(discardedCards);\n        this.emit('roundend', { winner: roundWinningTeam, cards: this._currentRoundCards });\n        // Clear current round cards\n        this._currentRoundCards = [];\n        this.roundCount++;\n        // Check if the game has finished\n        if (this.roundCount === 12) {\n            var score = void 0;\n            // Calculate score\n            if (roundWinningTeam.role === 'ATTACK') {\n                score = this.calculateScore(true);\n            }\n            else {\n                score = this.calculateScore(false);\n            }\n            // Emit event\n            this.emit('end', { score: score });\n        }\n        else {\n            // Init new round\n            this.initRound(largestCard.playedBy);\n        }\n    };\n    Game.prototype.calculateScore = function (revealHiddenCards) {\n        var score = 0;\n        if (revealHiddenCards) {\n            var hiddenCardScore = this._hiddenCards.reduce(function (accumulator, current) {\n                return accumulator + current.pointsHeld();\n            }, 0);\n            score += hiddenCardScore;\n        }\n        var attackTeamScore = this._teams.filter(function (team) { return team.role === 'ATTACK'; })[0].ownedCards.reduce(function (accumulator, current) {\n            return accumulator + current.points;\n        }, 0);\n        score += attackTeamScore;\n        return score;\n    };\n    Game.prototype.getPlayerTeam = function (name) {\n        if (!(typeof name === 'string')) {\n            name = name.name;\n        }\n        ;\n        return this._teams.filter(function (team) {\n            return !(team.players.filter(function (player) { return player.name === name; }).length === 0);\n        })[0];\n    };\n    Game.prototype.getPlayerIndex = function (name) {\n        if (!(typeof name === 'string')) {\n            name = name.name;\n        }\n        ;\n        return this._players.findIndex(function (player) { return player.name === name; });\n    };\n    Game.prototype.getPlayerByName = function (name) {\n        var player = this._players[this.getPlayerIndex(name)];\n        if (!player) {\n            return undefined;\n        }\n        ;\n        return player;\n    };\n    Game.prototype.findMostDuplicates = function (array) {\n        var count_obj = {};\n        for (var i = 0; i < array.length; i++) {\n            count_obj[array[i]] = count_obj[array[i]] ? count_obj[array[i]] + 1 : 1;\n        }\n        var keysSorted = Object.keys(count_obj).sort(function (a, b) { return count_obj[b] - count_obj[a]; });\n        return keysSorted[0];\n    };\n    Object.defineProperty(Game.prototype, \"discardedPile\", {\n        get: function () {\n            return this._discardedPile;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"currentRoundCards\", {\n        get: function () {\n            return this._currentRoundCards;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"players\", {\n        get: function () {\n            return this._players;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"teams\", {\n        get: function () {\n            return this._teams;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"hiddenCards\", {\n        get: function () {\n            return this._hiddenCards;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"currentPlayer\", {\n        get: function () {\n            return this._currentPlayer;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Game.prototype, \"nextPlayer\", {\n        get: function () {\n            var index = this.getPlayerIndex(this._currentPlayer);\n            if (++index === 4) {\n                index = 0;\n            }\n            return this._players[index];\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Game;\n}(events_1.EventEmitter));\nexports.Game = Game;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Player = void 0;\nvar Player = /** @class */ (function () {\n    function Player(name) {\n        this.hand = [];\n        this.name = name;\n    }\n    Player.prototype.hasCard = function (card) {\n        if (!this.hand.includes(card)) {\n            return false;\n        }\n        else {\n            return true;\n        }\n    };\n    Player.prototype.removeCard = function (card) {\n        // Return if player does not have card\n        if (!this.hasCard(card)) {\n            return;\n        }\n        // Remove card from hand\n        var i = this.hand.findIndex(function (c) { return c.value === card.value && c.color === card.color; });\n        this.hand.splice(i, 1);\n    };\n    return Player;\n}());\nexports.Player = Player;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Deck = void 0;\nvar card_1 = require(\"./card\");\nvar shuffle_array_1 = __importDefault(require(\"shuffle-array\"));\nfunction createDeck() {\n    // Init deck\n    var deck = [];\n    // Populate with unshuffled cards\n    for (var i = 2; i < 15; i++) {\n        for (var j = 1; j < 5; j++) {\n            deck.push(new card_1.Card(i, j));\n        }\n    }\n    deck.push(new card_1.Card(15), new card_1.Card(16));\n    // Shuffle deck\n    shuffle_array_1.default(deck);\n    return deck;\n}\nvar Deck = /** @class */ (function () {\n    function Deck() {\n        this.shuffle = createDeck();\n    }\n    Object.defineProperty(Deck.prototype, \"cards\", {\n        get: function () {\n            return this.shuffle;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Deck.prototype, \"length\", {\n        get: function () {\n            return this.shuffle.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deck.prototype.draw = function () {\n        // Mark and remove card from deck\n        var card = this.cards[0];\n        this.shuffle.shift();\n        return card;\n    };\n    Deck.prototype.takeRemaining = function () {\n        // Mark cards to return and clear shuffle\n        var cards = this.cards;\n        this.shuffle = [];\n        return cards;\n    };\n    return Deck;\n}());\nexports.Deck = Deck;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Team = void 0;\nvar Team = /** @class */ (function () {\n    function Team(_a, role) {\n        var player1 = _a[0], player2 = _a[1];\n        this._players = [player1, player2];\n        this.role = role;\n    }\n    Object.defineProperty(Team.prototype, \"players\", {\n        get: function () {\n            return this._players;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Team.prototype, \"ownedCards\", {\n        get: function () {\n            return this._ownedCards;\n        },\n        set: function (cards) {\n            this._ownedCards = cards;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Team.prototype.addCard = function (_card) {\n        var cardToAdd = {\n            card: _card,\n            points: _card.pointsHeld()\n        };\n        this._ownedCards.push(cardToAdd);\n    };\n    return Team;\n}());\nexports.Team = Team;\n","import React from 'react';\nimport {Values, Colors} from './game-engine';\nimport { DiscardedCard, OwnedCard, Card } from './App';\nimport svg from './svg-cards.svg';\n\nexport default function Result({isOpen, discardedCards, takenCards, flip, score, hiddenCards}: {isOpen: boolean, discardedCards: DiscardedCard[], takenCards: OwnedCard[], flip: boolean, score: number, hiddenCards: Card[]}) {    \n    return (\n        <div className=\"result\" style={{visibility: isOpen? 'visible' : 'hidden'}}>\n            <div className=\"title\">\n                This game has ended!\n            </div>\n            <div className=\"summary\">\n                <p>Total score of attacking team: {score}</p>\n                <p>Hidden card flip: {flip ? 'true': 'false'}</p>\n                <p>Number of discarded cards: {discardedCards.length}</p>\n                <p>Number of taken cards: {takenCards.length}</p>\n            </div>\n            <div className=\"cards-summary\">\n                <p>Cards hidden:</p>\n                <div className=\"taken-cards-container\">\n                    {hiddenCards.map(card => {\n                        return (\n                        <div className=\"card\">\n                            <div className=\"outer-wrapper-small\">\n                                <div className=\"card-wrapper-small\">\n                                    <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                </div>\n                            </div>\n                        </div>\n                        )})}\n                </div>\n            </div>\n            <div className=\"cards-summary\">\n                <p>Cards successfully taken:</p>\n                <div className=\"taken-cards-container\">\n                    {takenCards.map(card => {\n                        return (\n                        <div className=\"card\">\n                            <div className=\"outer-wrapper-small\">\n                                <div className=\"card-wrapper-small\">\n                                    <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                </div>\n                            </div>\n                            <div className=\"card-played-by\">\n                                <div>{card.points}</div>\n                            </div>\n                        </div>\n                        )})}\n                </div>\n            </div>\n            <div className=\"exit\">\n                <button onClick={() => window.location.reload()}>Restart game</button>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport { Values, Colors } from './game-engine';\nimport { SocketContext, GameObject, Player, Card, DiscardedCard, ResultObject, OwnedCard } from './App';\nimport svg from './svg-cards.svg';\nimport './Cards.css';\nimport Cookies from 'universal-cookie';\nimport Result from './Result';\n\nconst cookies = new Cookies();\n\nexport default function Game({game: gameInstance, name}: {game: GameObject, name: string}) {\n\n    const socket = useContext(SocketContext);\n\n    const [game, setGame] = useState<GameObject>();\n    const [cardsToPutQueue, setCardsToPutQueue] = useState<Card[]>([]);\n    const [currentRoundState, setCurrentRoundState] = useState<'NORMAL' | 'BOMB' | 'MULTIPLE' | 'CHALLENGE' | 'NONE'>('NORMAL');\n    const [cardsToPlay, setCardsToPlay] = useState<Card[]>([]);\n    const [topCards, setTopCards] = useState<Card[]>([]);\n    const [currentRoundCards, setCurrentRoundCards] = useState<DiscardedCard[][]>([]);\n    const [challengeCards, setChallengeCards] = useState<Card[]>();\n\n    const [player, setPlayer] = useState<Player>();\n    const [teammate, setTeammate] = useState<Player>();\n    const [opponents, setOpponents] = useState<[Player, Player]>();\n\n    const [res, setRes] = useState<ResultObject>();\n\n    const [consoleMessages, setConsoleMessages] = useState<string[]>([]);\n\n    const _console = useRef<HTMLDivElement>(null);\n\n    const addMessage = (message: string) => {\n        setConsoleMessages(prevMessages => [...prevMessages, message]);\n        setTimeout(() => {\n            _console.current!.scrollTop = _console.current!.scrollHeight + 10\n        }, 0);\n    }\n    \n    useEffect(() => {\n        setGame(gameInstance);\n        socket.on('dispatch', ({ game: gameInstance, type, payload }: { game: GameObject, type: string, payload: {[keys: string]: any} }) => {\n            setGame(gameInstance);\n            switch(type){\n                case 'cardDraw':\n                    addMessage(`${payload.player.name} has drawn a card!`);\n                    break;\n                case 'cardTake':\n                    addMessage(`${payload.player.name} has taken remaining cards!`);\n                    break;\n                case 'cardPut':\n                    addMessage(`${payload.player.name} has put down six cards for the defending team!`);\n                    break;\n                case 'setMasterColor':\n                    addMessage(`${payload.player.name} used their ${Values[payload.card._value]} ${Colors[payload.card._color]} card to set the master color!`);\n                    break;\n                case 'cardPlay':\n                    setCurrentRoundState('NORMAL');\n                    setCurrentRoundCards(prevCards => [...prevCards, [payload.card]]);\n                    addMessage(`${payload.player.name} has played card ${Values[payload.card.card._value]} ${Colors[payload.card.card._color]}!`);\n                    break;\n                case 'roundEnd':\n                    setCurrentRoundState('NORMAL');\n                    setCurrentRoundCards([]);\n                    setCardsToPlay([]);\n                    addMessage(`A round has ended with the ${payload.winner.role} team winning. ${payload.discardedCards.length} cards discarded and ${payload.takenCards.length} cards taken.`);\n                    break;\n                case 'strongBomb':\n                    setCurrentRoundState('BOMB');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name} has played a strong bomb!`);\n                    break;\n                case 'weakBomb':\n                    setCurrentRoundState('BOMB');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name} has played a weak bomb!`);\n                    break;\n                case 'multipleCardPlay':\n                    setCurrentRoundState('MULTIPLE');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name} has played multiple cards!`);\n                    break;\n                case 'forMultipleCardPlay':\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name} has played multiple cards!`);\n                    break;\n                case 'forBombCardPlay':\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name} has played in response to a bomb!`);\n                    break;\n                case 'requestChallenge':\n                    setChallengeCards(payload.cards);\n                    setCurrentRoundState('CHALLENGE');\n                    addMessage(`${payload.player.name} is trying to play multiple cards!`);\n                    break;\n                case 'challengeFailed':\n                    addMessage(`${payload.playerName} is not challenging!`);\n                    break;\n                case 'challengeSuccess':\n                    addMessage(`${payload.playerName} has successfully challenged!`);\n                    break;\n                case 'gameEnd':\n                    cookies.remove('name');\n                    cookies.remove('room');\n                    addMessage(`The game has ended with the attacking team holding ${payload.score} score and ${payload.flipCards ? 'flipping the hidden cards' : 'failing to flip the final cards'}!`);\n                    setRes({\n                        flip: payload.flipCards,\n                        isOpen: true,\n                        score: payload.score,\n                        discardedCards: gameInstance._discardedPile,\n                        takenCards: gameInstance._teams.find(team => team.role === 'ATTACK')!._ownedCards,\n                        hiddenCards: gameInstance._hiddenCards\n                    });\n                    break;\n                case 'drawPhase':\n                    addMessage('Draw phase now');\n                    break;\n                case 'takePhase':\n                    addMessage('Take phase now');\n                    break;\n                case 'putPhase':\n                    addMessage('Put phase now');\n                    break;\n                case 'playPhase':\n                    addMessage('Play phase now');\n                    break;\n                case 'playerLeave':\n                    addMessage(`${payload.name} has left the game!`);\n                    break;\n                case 'playerJoin':\n                    addMessage(`${payload.name} has joined back!`);\n                    break;\n                case 'error':\n                    addMessage(`Error! ${payload.message}`);\n                    break;\n            }\n            console.log({ gameInstance, type, payload });\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log({game, player, teammate, opponents});\n        if(game){\n            let player = game._players.filter(_player => {\n                return _player.name === name;\n            })[0];\n\n            let teammate = game._players.filter(_player => {\n                return (!(_player.name === name) && _player.role === player.role);\n            })[0];\n\n            let opponents = game._players.filter(_player => {\n                return !(_player.role === player.role);\n            });\n\n            if(game._players.findIndex(_player => _player.name === name) < 2){\n                opponents.reverse();\n            }\n\n            let cardsPerPlayer = game._currentRoundCards.length / game.currentRoundCount;\n\n            for(let i=0;i<game._currentRoundCards.length;i+=cardsPerPlayer){\n                setCurrentRoundCards(prevCards => [...prevCards, game._currentRoundCards.slice(i, i+cardsPerPlayer)]);\n            }\n\n            setTopCards(game._currentRoundTopCards);\n            if(!currentRoundState) setCurrentRoundState(cardsPerPlayer > 1 ? 'MULTIPLE' : 'NORMAL');\n            setPlayer(player);\n            setTeammate(teammate);\n            setOpponents(opponents as [Player, Player]);\n        }\n    }, [game])\n\n    const handleDrawCard = () => {\n        socket.emit('requestDraw');\n    }\n\n    const handleTakeCards = () => {\n        socket.emit('requestTake', {player});\n    }\n\n    const handleSetMasterColor = (card: Card) => {\n        if(!(card._value === game!.masterNumber) || card._color === Colors.JOKER){\n            addMessage(`Your card ${card._color} ${card._value} cannot be used to set the master color!`);\n        }else{\n            socket.emit('requestSetMasterColor', {card, player});\n        }\n    } \n\n    const handleAddCardToPutQueue = (card: Card) => {\n        if(!!(cardsToPutQueue.find(_card => _card._color === card._color && _card._value === card._value))){\n            let newQueue = [...cardsToPutQueue];\n            let cardIndex = newQueue.findIndex(_card => _card._color === card._color && _card._value === card._value);\n            newQueue.splice(cardIndex, 1);\n            setCardsToPutQueue(newQueue);\n        }else{\n            setCardsToPutQueue(prevCards => [...prevCards, card]);\n        }\n    }\n\n    const handlePutCards = () => {\n        if(!(cardsToPutQueue.length === 6)){\n            addMessage(`You have ${cardsToPutQueue.length}/6 cards in your queue!`);\n        }else{\n            socket.emit('requestPut', {player, cards: cardsToPutQueue});\n        }\n    }\n\n    const handlePlaceDownCard = (card: Card) => {\n        if(!!(cardsToPlay.find(_card => _card._color === card._color && _card._value === card._value))){\n            let newCards = [...cardsToPlay];\n            let cardIndex = newCards.findIndex(_card => _card._color === card._color && _card._value === card._value);\n            newCards.splice(cardIndex, 1);\n            setCardsToPlay(newCards);\n        }else{\n            setCardsToPlay(prevCards => [...prevCards, card]);\n        }\n    }\n\n    const handlePlayCard = () => {\n        if(cardsToPlay.length > 1){\n            addMessage('can only play 1 card');\n        }else if(cardsToPlay.length === 0){\n            addMessage('pick a card');\n        }else{\n            socket.emit('requestPlay', {card: cardsToPlay[0]});\n        }\n    }\n\n    const handlePlayMultipleCards = () => {\n        if(cardsToPlay.length < 2){\n            addMessage('play 1 card plz');\n        }else{\n            socket.emit('requestPlayMultiple', {cards: cardsToPlay});\n        }\n    }\n\n    const handlePlayBomb = () => {\n        if(!(cardsToPlay.length === 4)){\n            addMessage('you can only throw bombs with 4 cards!');\n        }else{\n            let allSameValue = !cardsToPlay.find(card => !(card._value === cardsToPlay[0]._value));\n            if(!allSameValue){\n                addMessage('you can only throw bombs with cards of same value');\n            }else{\n                socket.emit('requestPlayBomb', {cards: cardsToPlay});\n            }\n        }\n    }\n\n    const handlePlayForMultiple = () => {\n        if(!(cardsToPlay.length === topCards.length)){\n            addMessage(`expected ${topCards.length} cards, got ${cardsToPlay.length} instead.`);\n        }else{\n            socket.emit('requestPlayForMultiple', {cards: cardsToPlay});\n        }\n    }\n\n    const handlePlayForBomb = () => {\n        if(!(cardsToPlay.length === 4)){\n            addMessage('you must play 4 cards!');\n        }else{\n            socket.emit('requestPlayForBomb', {cards: cardsToPlay});\n        }\n    }\n\n    const handleChallenge = () => {\n        if(!(cardsToPlay.length === 1)){\n            addMessage('can only challenge with 1 card');\n        }else{\n            socket.emit('challenge', {card: cardsToPlay[0], player});\n            setCurrentRoundState('NORMAL');\n            setCurrentRoundState('NONE');\n        }\n    }\n\n    const handleNoChallenge = () => {\n        socket.emit('noChallenge', {playerName: player!.name});\n        setCurrentRoundState('NORMAL');\n    }\n\n    const handleLeave = () => {\n        if(window.confirm('Are you sure you want to leave this game?')){\n            cookies.remove('room');\n            cookies.remove('game');\n            window.location.reload();\n        }\n    }\n\n    if(!game || !player || !teammate || !opponents){\n        return <div>Loading...</div>\n    }\n\n    return (\n        <>\n            <div className=\"side-bar\">\n                <div>\n                    Playing as: {player.name}\n                </div>\n                <div>\n                    Master number: {Values[game.masterNumber] || 'JOKER'}\n                </div>\n                <div>\n                    Master color: {Colors[game.masterColor] || 'Not yet selected'}\n                </div>\n                <div>\n                    Current phase: {game.phase}\n                </div>\n                <div>\n                    You are on the {player.role}ING team!\n                </div>\n                <div>\n                        {game.phase === 'PUTTING' && player.hand.length === 18 && 'Cards you are putting down:'}\n                        <div className=\"selected-cards\">\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && cardsToPutQueue.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-small\">\n                                        <div className=\"card-wrapper-active-small\" onClick={() => handleAddCardToPutQueue(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                            {game.phase === 'PLAYING' && (game._currentPlayer.name === player.name || currentRoundState === 'CHALLENGE') && (\n                                <>\n                                    <div>Currently selected cards:</div>\n                                    {cardsToPlay.map((card, idx) => {\n                                        return (\n                                            <div key={idx} className=\"outer-wrapper-small\">\n                                                <div className=\"card-wrapper-active-small\" onClick={() => handlePlaceDownCard(card)}>\n                                                    <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                                </div>\n                                            </div>\n                                        )\n                                    })}\n                                </>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"leave-game\">\n                        <button onClick={() => handleLeave()}>Leave this game</button>\n                    </div>\n            </div>\n            <div className=\"game-container\">\n                <div className=\"teammate\">\n                    <div className=\"other-player-name\">{teammate.name}</div>\n                    <div className=\"other-hand-container\">\n                        {teammate.hand.map((_, idx) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-small\">\n                                    <div key={idx} className=\"card-wrapper-small\">\n                                        <img className=\"BACK\" src={svg}></img>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"other-role\">\n                        {teammate.role}ING\n                    </div>\n                </div>\n                <>\n                {opponents.map((opponent, idx) => {\n                    return (<div key={idx} className={`opponent-${idx}`}>\n                        <div className=\"other-player-name\">{opponent.name}</div>\n                        <div className=\"other-hand-container\">\n                            {opponent.hand.map((_, idx) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-small\">\n                                        <div key={idx} className=\"card-wrapper-small\">\n                                            <img className=\"BACK\" src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div className=\"other-role\">\n                            {opponent.role}ING\n                        </div>\n                    </div>)\n                })}\n                </>\n                <div className=\"self\">\n                    {/* Space for drawing/taking buttons */}\n                    <div className=\"button-2\">\n                        <div>\n                            {game.phase === 'DRAWING' && game._currentPlayer.name === player.name && <button className=\"button-2\" onClick={() => handleDrawCard()}>Draw</button>}\n                        </div>\n                        <div>\n                            {game.phase === 'TAKING' && player.role === 'DEFEND' && <button className=\"button-2\" onClick={() => handleTakeCards()}>Take remaining</button>}\n                        </div>\n                        <div>\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && <button className=\"button-2\" onClick={() => handlePutCards()}>Put down selected</button>}\n                        </div>\n                    </div>\n                    {/* Space for list of cards (to declare master, to put and to play) */}\n                    <div className=\"hand-container\">\n                        <>\n                            {game.phase === 'DRAWING' && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper-active\" onClick={() => handleSetMasterColor(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'TAKING' && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper-active\" onClick={() => handleAddCardToPutQueue(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PUTTING' && !(player.hand.length === 18) && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PLAYING' && (game._currentPlayer.name === player.name || currentRoundState === 'CHALLENGE') && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper-active\" onClick={() => handlePlaceDownCard(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PLAYING' && !(game._currentPlayer.name === player.name) && !(currentRoundState === 'CHALLENGE') && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                    </div>\n                    <div>\n                        {currentRoundState === 'CHALLENGE' && !(game._currentPlayer.name === player.name) && (\n                            <>\n                                <div className=\"challenge-desc\">{game._currentPlayer.name} is playing multiple cards. Challenge?</div>\n                                <button className=\"button-2\" onClick={() => handleChallenge()}>Challenge</button>\n                                <button className=\"button-3\" onClick={() => handleNoChallenge()}>Pass</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && currentRoundState !== 'NONE' && game._currentPlayer.name === player.name && currentRoundState === 'NORMAL' && game.currentRoundCount === 0 && (\n                            <>\n                                <button className=\"button-1\" onClick={() => handlePlayCard()}>Play</button>\n                                <button className=\"button-2\" onClick={() => handlePlayMultipleCards()}>Play many</button>\n                                <button className=\"button-3\" onClick={() => handlePlayBomb()}>Play bomb</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'NORMAL' && game.currentRoundCount > 0 && (\n                            <>\n                                <button className=\"button-1\" onClick={() => handlePlayCard()}>Play</button>\n                            </>\n                            )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'BOMB' && (\n                            <>\n                                <button className=\"button-3\" onClick={() => handlePlayForBomb()}>Play</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'MULTIPLE' && (                                    <>\n                                <button className=\"button-2\" onClick={() => handlePlayForMultiple()}>Play</button>\n                            </>\n                        )}\n                    </div>\n                </div>\n                <div className=\"game-info-container\">\n                    <div className=\"hidden-cards-reveal\">\n                        {game.phase === 'PUTTING' && game._hiddenCards.map((card: Card, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper\">\n                                    <div className=\"card-wrapper\">\n                                        <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"hidden-cards-reveal\">\n                        {currentRoundState === 'CHALLENGE' && <div className=\"title\">甩牌</div>}\n                        {currentRoundState === 'CHALLENGE' && challengeCards && challengeCards.map((card: Card, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper\">\n                                    <div className=\"card-wrapper\">\n                                        <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"draw-pile\">\n                        {(game.phase === 'DRAWING' || game.phase === 'TAKING') && game.drawPile.shuffle.map((_: any, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-medium\" style={{\n                                    'position': 'absolute',\n                                    'zIndex': -1*idx,\n                                    'top': '0',\n                                    'left': '0',\n                                    'transform': `translateY(${idx * 0.4}px) rotateX(80deg)`\n                                }}>\n                                    <div className=\"card-wrapper-medium\">\n                                        <img src={svg} className=\"BACK\"></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"current-cards\">\n                        <div className=\"teammate-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === teammate.name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === teammate.name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"op-1-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === opponents[0].name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === opponents[0].name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"op-2-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === opponents[1].name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === opponents[1].name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"self-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === player.name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === player.name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                    </div>\n                    {game.phase === 'PLAYING' && (\n                        <div className=\"taken-cards\">\n                            {game._teams.find(team => team.role === 'ATTACK')!._ownedCards.length !== 0 && <div className=\"description\">Cards taken</div>}\n                            {game._teams.find(team => team.role === 'ATTACK')!._ownedCards.map((card: OwnedCard, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-small\">\n                                    <div className=\"card-wrapper-small\">\n                                        <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                        </div>\n                    )}\n                    {game.phase === 'PLAYING' && (\n                        <div className=\"discarded-cards\">\n                            {game._discardedPile.length !== 0 && <div className=\"description\">Cards discarded</div>}\n                            {game._discardedPile.map((_: any, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-medium\" style={{\n                                        'position': 'absolute',\n                                        'zIndex': -1*idx,\n                                        'top': '0',\n                                        'left': '0',\n                                        'transform': `translateY(${idx * 0.4}px) rotateX(80deg)`\n                                    }}>\n                                        <div className=\"card-wrapper-medium\">\n                                            <img src={svg} className=\"BACK\"></img>\n                                        </div>\n                                    </div>\n                            )})}\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div ref={_console} className=\"console\">\n                {consoleMessages.map((message: string, idx: number) => {\n                    return (\n                        <div key={idx} className=\"console-message\">\n                            {message}\n                        </div>\n                    )\n                })}\n            </div>\n            {res && <Result isOpen={res.isOpen} discardedCards={res.discardedCards} takenCards={res.takenCards} score={res.score} flip={res.flip} hiddenCards={res.hiddenCards}/>}\n        </>\n    )\n}\n","import React from 'react';\nimport {Values, Colors} from './game-engine';\nimport { DiscardedCard, OwnedCard, Card } from './App';\nimport svg from './svg-cards.svg';\n\nexport default function Result({isOpen, discardedCards, takenCards, flip, score, hiddenCards}: {isOpen: boolean, discardedCards: DiscardedCard[], takenCards: OwnedCard[], flip: boolean, score: number, hiddenCards: Card[]}) {    \n    return (\n        <div className=\"result\" style={{visibility: isOpen? 'visible' : 'hidden'}}>\n            <div className=\"title\">\n                這場遊戲結束了！\n            </div>\n            <div className=\"summary\">\n                <p>掙分方得分：{score}</p>\n                <p>掙分方翻底牌：{flip ? '成功': '失敗'}</p>\n                <p>棄牌數量：{discardedCards.length}</p>\n                <p>掙分方得牌數量：{takenCards.length}</p>\n            </div>\n            <div className=\"cards-summary\">\n                <p>底牌：</p>\n                <div className=\"taken-cards-container\">\n                    {hiddenCards.map(card => {\n                        return (\n                        <div className=\"card\">\n                            <div className=\"outer-wrapper-small\">\n                                <div className=\"card-wrapper-small\">\n                                    <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                </div>\n                            </div>\n                        </div>\n                        )})}\n                </div>\n            </div>\n            <div className=\"cards-summary\">\n                <p>掙分方得牌：</p>\n                <div className=\"taken-cards-container\">\n                    {takenCards.map(card => {\n                        return (\n                        <div className=\"card\">\n                            <div className=\"outer-wrapper-small\">\n                                <div className=\"card-wrapper-small\">\n                                    <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                </div>\n                            </div>\n                            <div className=\"card-played-by\">\n                                <div>{card.points}</div>\n                            </div>\n                        </div>\n                        )})}\n                </div>\n            </div>\n            <div className=\"exit\">\n                <button onClick={() => window.location.reload()}>重新開始</button>\n            </div>\n        </div>\n    )\n}\n","import React, { useState, useEffect, useContext, useRef } from 'react';\nimport {Colors, Values} from './game-engine';\nimport { SocketContext, GameObject, Player, Card, DiscardedCard, ResultObject, OwnedCard } from './App';\nimport svg from './svg-cards.svg';\nimport './Cards.css';\nimport Cookies from 'universal-cookie';\nimport ResultChinese from './ResultChinese';\n\nconst cookies = new Cookies();\n\nconst _Values = (n: number) => {\n    switch(n){\n        case 2:\n            return '2';\n        case 3:\n            return '3';\n        case 4:\n            return '4';\n        case 5:\n            return '5';\n        case 6:\n            return '6';\n        case 7:\n            return '7';\n        case 8: \n            return '8';\n        case 9:\n            return '9';\n        case 10:\n            return '10';\n        case 11:\n            return 'J';\n        case 12:\n            return 'Q';\n        case 13:\n            return 'K';\n        case 14:\n            return 'A';\n        case 15:\n            return '小貓';\n        case 16:\n            return '大貓';\n    }\n}\n\nenum _Colors {\n    紅桃 = 1,\n    黑桃,\n    梅花,\n    方塊,\n    貓\n}\n\nexport default function Game({game: gameInstance, name}: {game: GameObject, name: string}) {\n\n    const socket = useContext(SocketContext);\n\n    const [game, setGame] = useState<GameObject>();\n    const [cardsToPutQueue, setCardsToPutQueue] = useState<Card[]>([]);\n    const [currentRoundState, setCurrentRoundState] = useState<'NORMAL' | 'BOMB' | 'MULTIPLE' | 'CHALLENGE' | 'NONE'>('NORMAL');\n    const [cardsToPlay, setCardsToPlay] = useState<Card[]>([]);\n    const [topCards, setTopCards] = useState<Card[]>([]);\n    const [currentRoundCards, setCurrentRoundCards] = useState<DiscardedCard[][]>([]);\n    const [challengeCards, setChallengeCards] = useState<Card[]>();\n\n    const [player, setPlayer] = useState<Player>();\n    const [teammate, setTeammate] = useState<Player>();\n    const [opponents, setOpponents] = useState<[Player, Player]>();\n\n    const [consoleMessages, setConsoleMessages] = useState<string[]>([]);\n\n    const [res, setRes] = useState<ResultObject>();\n\n    const _console = useRef<HTMLDivElement>(null);\n\n    const addMessage = (message: string) => {\n        setConsoleMessages(prevMessages => [...prevMessages, message]);\n        setTimeout(() => {\n            _console.current!.scrollTop = _console.current!.scrollHeight + 10\n        }, 0);\n    }\n    \n    useEffect(() => {\n        socket.on('dispatch', ({ game: gameInstance, type, payload }: { game: GameObject, type: string, payload: {[keys: string]: any} }) => {\n            setGame(gameInstance);\n            switch(type){\n                case 'cardDraw':\n                    addMessage(`${payload.player.name}摸走了一張牌`);\n                    break;\n                case 'cardTake':\n                    addMessage(`${payload.player.name}收走了底牌`);\n                    break;\n                case 'cardPut':\n                    addMessage(`${payload.player.name}扣下了六張底牌`);\n                    break;\n                case 'setMasterColor':\n                    addMessage(`${payload.player.name}用${_Colors[payload.card._color]}${_Values(payload.card._value)}來決定了主色！`);\n                    break;\n                case 'cardPlay':\n                    setCurrentRoundState('NORMAL');\n                    setCurrentRoundCards(prevCards => [...prevCards, [payload.card]]);\n                    addMessage(`${payload.player.name}打出了${_Colors[payload.card.card._color]}${_Values(payload.card.card._value)}!`);\n                    break;\n                case 'roundEnd':\n                    setCurrentRoundState('NORMAL');\n                    setCurrentRoundCards([]);\n                    setCardsToPlay([]);\n                    addMessage(`${payload.winner.role === 'ATTACK' ? '掙分' : '打分'}方贏得了這一輪。 ${payload.discardedCards.length}張牌被棄掉${payload.takenCards.length === 0 ? '。' : `，${payload.takenCards.length}張牌被掙分方收走。`}`);\n                    break;\n                case 'strongBomb':\n                    setCurrentRoundState('BOMB');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name}甩了沒有底牌的四張卡`);\n                    break;\n                case 'weakBomb':\n                    setCurrentRoundState('BOMB');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name}甩了有底牌的四張卡`);\n                    break;\n                case 'multipleCardPlay':\n                    setCurrentRoundState('MULTIPLE');\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name}一次打出了多張牌`);\n                    break;\n                case 'forMultipleCardPlay':\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name}一次性打出了多張牌`);\n                    break;\n                case 'forBombCardPlay':\n                    setCurrentRoundCards(prevCards => [...prevCards, payload.cards]);\n                    addMessage(`${payload.player.name}打出了四張牌`);\n                    break;\n                case 'requestChallenge':\n                    setCurrentRoundState('CHALLENGE');\n                    setChallengeCards(payload.cards);\n                    addMessage(`${payload.player.name}想一次打出多張牌。您要挑戰嗎？`);\n                    break;\n                case 'challengeFailed':\n                    addMessage(`${payload.playerName}選擇不挑戰`);\n                    break;\n                case 'challengeSuccess':\n                    addMessage(`${payload.playerName}成功的挑戰了`);\n                    break;\n                case 'gameEnd':\n                    cookies.remove('name');\n                    cookies.remove('room');\n                    addMessage(`本場遊戲結束了！打的一方總共拿到了${payload.score}分，${payload.flipCards ? '並且成功的翻了底牌' : '但沒能夠翻到底牌'}`);\n                    setRes({\n                        flip: payload.flipCards,\n                        isOpen: true,\n                        score: payload.score,\n                        discardedCards: gameInstance._discardedPile,\n                        takenCards: gameInstance._teams.find(team => team.role === 'ATTACK')!._ownedCards,\n                        hiddenCards: gameInstance._hiddenCards\n                    });\n                    break;\n                case 'drawPhase':\n                    addMessage('開始摸牌了');\n                    break;\n                case 'takePhase':\n                    addMessage('打分的一隊可以拿走底牌了');\n                    break;\n                case 'putPhase':\n                    addMessage('打分的一隊可以開始扣底牌了');\n                    break;\n                case 'playPhase':\n                    addMessage('開始出牌了！');\n                    break;\n                case 'playerLeave':\n                    addMessage(`${payload.name}剛剛離開了遊戲`);\n                    break;\n                case 'playerJoin':\n                    addMessage(`${payload.name}剛剛回到了遊戲`);\n                    break;\n                case 'error':\n                    addMessage(`錯誤！${payload.message}`);\n                    break;\n            }\n            console.log({ gameInstance, type, payload });\n        });\n    }, []);\n\n    useEffect(() => {\n        if(game){\n            let player = game._players.filter(_player => {\n                return _player.name === name;\n            })[0];\n\n            let teammate = game._players.filter(_player => {\n                return (!(_player.name === name) && _player.role === player.role);\n            })[0];\n\n            let opponents = game._players.filter(_player => {\n                return !(_player.role === player.role);\n            });\n\n            if(game._players.findIndex(_player => _player.name === name) < 2){\n                opponents.reverse();\n            }\n\n            let cardsPerPlayer = game._currentRoundCards.length / game.currentRoundCount;\n\n            for(let i=0;i<game._currentRoundCards.length;i+=cardsPerPlayer){\n                setCurrentRoundCards(prevCards => [...prevCards, game._currentRoundCards.slice(i, i+cardsPerPlayer)]);\n            }\n\n            setTopCards(game._currentRoundTopCards);\n            if(!currentRoundState) setCurrentRoundState(cardsPerPlayer > 1 ? 'MULTIPLE' : 'NORMAL');\n            setPlayer(player);\n            setTeammate(teammate);\n            setOpponents(opponents as [Player, Player]);\n        }\n    }, [game]);\n\n    const handleDrawCard = () => {\n        socket.emit('requestDraw');\n    }\n\n    const handleTakeCards = () => {\n        socket.emit('requestTake', {player});\n    }\n\n    const handleSetMasterColor = (card: Card) => {\n        if(!(card._value === game!.masterNumber) || card._color === Colors.JOKER){\n            addMessage(`您的卡牌 ${_Colors[card._color]}${_Values(card._value)} 不能用來設置主色！`);\n        }else{\n            socket.emit('requestSetMasterColor', {card, player});\n        }\n    } \n\n    const handleAddCardToPutQueue = (card: Card) => {\n        if(!!(cardsToPutQueue.find(_card => _card._color === card._color && _card._value === card._value))){\n            let newQueue = [...cardsToPutQueue];\n            let cardIndex = newQueue.findIndex(_card => _card._color === card._color && _card._value === card._value);\n            newQueue.splice(cardIndex, 1);\n            setCardsToPutQueue(newQueue);\n        }else{\n            setCardsToPutQueue(prevCards => [...prevCards, card]);\n        }\n    }\n\n    const handlePutCards = () => {\n        if(!(cardsToPutQueue.length === 6)){\n            addMessage(`您準備放置的卡牌現在有${cardsToPutQueue.length}/6張！`);\n        }else{\n            socket.emit('requestPut', {player, cards: cardsToPutQueue});\n        }\n    }\n\n    const handlePlaceDownCard = (card: Card) => {\n        if(!!(cardsToPlay.find(_card => _card._color === card._color && _card._value === card._value))){\n            let newCards = [...cardsToPlay];\n            let cardIndex = newCards.findIndex(_card => _card._color === card._color && _card._value === card._value);\n            newCards.splice(cardIndex, 1);\n            setCardsToPlay(newCards);\n        }else{\n            setCardsToPlay(prevCards => [...prevCards, card]);\n        }\n    }\n\n    const handlePlayCard = () => {\n        if(cardsToPlay.length > 1){\n            addMessage('您一次只能出一張牌！');\n        }else if(cardsToPlay.length === 0){\n            addMessage('請選擇一張您想出的牌！');\n        }else{\n            socket.emit('requestPlay', {card: cardsToPlay[0]});\n        }\n    }\n\n    const handlePlayMultipleCards = () => {\n        if(cardsToPlay.length < 2){\n            addMessage('請使用一次出一張牌的選項！');\n        }else{\n            socket.emit('requestPlayMultiple', {cards: cardsToPlay});\n        }\n    }\n\n    const handlePlayBomb = () => {\n        if(!(cardsToPlay.length === 4)){\n            addMessage('您必須一次性的甩4張牌！');\n        }else{\n            let allSameValue = !cardsToPlay.find(card => !(card._value === cardsToPlay[0]._value));\n            if(!allSameValue){\n                addMessage('您只能甩同樣大小的4張牌！');\n            }else{\n                socket.emit('requestPlayBomb', {cards: cardsToPlay});\n            }\n        }\n    }\n\n    const handlePlayForMultiple = () => {\n        if(!(cardsToPlay.length === topCards.length)){\n            addMessage(`您需要出${topCards.length}張牌，但您現在只選擇了${cardsToPlay.length}張牌！`);\n        }else{\n            socket.emit('requestPlayForMultiple', {cards: cardsToPlay});\n        }\n    }\n\n    const handlePlayForBomb = () => {\n        if(!(cardsToPlay.length === 4)){\n            addMessage('您必須出4張牌！');\n        }else{\n            socket.emit('requestPlayForBomb', {cards: cardsToPlay});\n        }\n    }\n\n    const handleChallenge = () => {\n        if(!(cardsToPlay.length === 1)){\n            addMessage('您只能用一張牌來挑戰！');\n        }else{\n            socket.emit('challenge', {card: cardsToPlay[0], player});\n            setCurrentRoundState('NONE');\n        }\n    }\n\n    const handleNoChallenge = () => {\n        socket.emit('noChallenge', {playerName: player!.name});\n        setCurrentRoundState('NORMAL');\n    }\n\n    const handleLeave = () => {\n        if(window.confirm('您確認要離開這一遊戲嗎？')){\n            cookies.remove('room');\n            cookies.remove('game');\n            window.location.reload();\n        }\n    }\n\n    if(!game || !player || !teammate || !opponents){\n        return <div>加載中...</div>\n    }\n\n    return (\n        <>\n            <div className=\"side-bar\">\n                <div>\n                    姓名：{player.name}\n                </div>\n                <div>\n                    主數：{_Values(game.masterNumber) || '貓'}\n                </div>\n                <div>\n                    主花色：{_Colors[game.masterColor] || '待定'}\n                </div>\n                <div>\n                    遊戲階段：{game.phase === 'DRAWING' ? '摸牌' : game.phase === 'TAKING' ? '拿底' : game.phase === 'PUTTING' ? '扣底' : '出牌'}\n                </div>\n                <div>\n                    您在{player.role === 'ATTACK' ? '掙分' : '打分'}隊\n                </div>\n                <div>\n                        {game.phase === 'PUTTING' && player.hand.length === 18 && '準備使用的牌：'}\n                        <div className=\"selected-cards\">\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && cardsToPutQueue.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-small\">\n                                        <div className=\"card-wrapper-active-small\" onClick={() => handleAddCardToPutQueue(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                            {game.phase === 'PLAYING' && (game._currentPlayer.name === player.name || currentRoundState === 'CHALLENGE') && (\n                                <>\n                                    <div>您選擇的牌：</div>\n                                    {cardsToPlay.map((card, idx) => {\n                                        return (\n                                            <div key={idx} className=\"outer-wrapper-small\">\n                                                <div className=\"card-wrapper-active-small\" onClick={() => handlePlaceDownCard(card)}>\n                                                    <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                                </div>\n                                            </div>\n                                        )\n                                    })}\n                                </>\n                            )}\n                        </div>\n                    </div>\n            </div>\n            <div className=\"leave-game\">\n                <button onClick={() => handleLeave()}>離開遊戲</button>\n            </div>\n            <div className=\"game-container\">\n                <div className=\"teammate\">\n                    <div className=\"other-player-name\">{teammate.name}</div>\n                    <div className=\"other-hand-container\">\n                        {teammate.hand.map((_, idx) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-small\">\n                                    <div key={idx} className=\"card-wrapper-small\">\n                                        <img className=\"BACK\" src={svg}></img>\n                                    </div>\n                                </div>\n                            )\n                        })}\n                    </div>\n                    <div className=\"other-role\">\n                        {teammate.role === 'ATTACK' ? '掙分' : '打分'}\n                    </div>\n                </div>\n                <>\n                {opponents.map((opponent, idx) => {\n                    return (<div key={idx} className={`opponent-${idx}`}>\n                        <div className=\"other-player-name\">{opponent.name}</div>\n                        <div className=\"other-hand-container\">\n                            {opponent.hand.map((_, idx) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-small\">\n                                        <div key={idx} className=\"card-wrapper-small\">\n                                            <img className=\"BACK\" src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                        <div className=\"other-role\">\n                            {opponent.role === 'ATTACK' ? '掙分' : '打分'}\n                        </div>\n                    </div>)\n                })}\n                </>\n                <div className=\"self\">\n                    {/* Space for drawing/taking buttons */}\n                    <div className=\"button-2\">\n                        <div>\n                            {game.phase === 'DRAWING' && game._currentPlayer.name === player.name && <button className=\"button-2\" onClick={() => handleDrawCard()}>摸牌</button>}\n                        </div>\n                        <div>\n                            {game.phase === 'TAKING' && player.role === 'DEFEND' && <button className=\"button-2\" onClick={() => handleTakeCards()}>拿底牌</button>}\n                        </div>\n                        <div>\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && <button className=\"button-2\" onClick={() => handlePutCards()}>扣底</button>}\n                        </div>\n                    </div>\n                    {/* Space for list of cards (to declare master, to put and to play) */}\n                    <div className=\"hand-container\">\n                        <>\n                            {game.phase === 'DRAWING' && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper-active\" onClick={() => handleSetMasterColor(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'TAKING' && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PUTTING' && player.hand.length === 18 && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div key={idx} className=\"card-wrapper-active\" onClick={() => handleAddCardToPutQueue(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PUTTING' && !(player.hand.length === 18) && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PLAYING' && (game._currentPlayer.name === player.name || currentRoundState === 'CHALLENGE') && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper-active\" onClick={() => handlePlaceDownCard(card)}>\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                        <>\n                            {game.phase === 'PLAYING' && !(game._currentPlayer.name === player.name) && !(currentRoundState === 'CHALLENGE') && player.hand.map((card: Card, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper\">\n                                        <div className=\"card-wrapper\">\n                                            <img className={`${Colors[card._color]}-${Values[card._value]}`} src={svg}></img>\n                                        </div>\n                                    </div>\n                                )\n                            })}\n                        </>\n                    </div>\n                    <div>\n                        {currentRoundState === 'CHALLENGE' && !(game._currentPlayer.name === player.name) && (\n                            <>\n                                <div className=\"challenge-desc\">{game._currentPlayer.name}想一次打出多張牌。您想挑戰嗎？</div>\n                                <button className=\"button-2\" onClick={() => handleChallenge()}>挑戰</button>\n                                <button className=\"button-3\" onClick={() => handleNoChallenge()}>不挑戰</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && currentRoundState !== 'NONE' && game._currentPlayer.name === player.name && currentRoundState === 'NORMAL' && game.currentRoundCount === 0 && (\n                            <>\n                                <button className=\"button-1\" onClick={() => handlePlayCard()}>出牌</button>\n                                <button className=\"button-2\" onClick={() => handlePlayMultipleCards()}>出多張牌</button>\n                                <button className=\"button-3\" onClick={() => handlePlayBomb()}>甩牌</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'NORMAL' && game.currentRoundCount > 0 && (\n                            <>\n                                <button className=\"button-1\" onClick={() => handlePlayCard()}>出牌</button>\n                            </>\n                            )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'BOMB' && (\n                            <>\n                                <button className=\"button-3\" onClick={() => handlePlayForBomb()}>甩牌</button>\n                            </>\n                        )}\n                        {game.phase === 'PLAYING' && game._currentPlayer.name === player.name && currentRoundState === 'MULTIPLE' && (                                    <>\n                                <button className=\"button-2\" onClick={() => handlePlayForMultiple()}>出多張牌</button>\n                            </>\n                        )}\n                    </div>\n                </div>\n                <div className=\"game-info-container\">\n                    <div className=\"hidden-cards-reveal\">\n                        {game.phase === 'PUTTING' && <div className=\"title\">底牌</div>}\n                        {game.phase === 'PUTTING' && game._hiddenCards.map((card: Card, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper\">\n                                    <div className=\"card-wrapper\">\n                                        <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"hidden-cards-reveal\">\n                        {currentRoundState === 'CHALLENGE' && <div className=\"title\">甩牌</div>}\n                        {currentRoundState === 'CHALLENGE' && challengeCards && challengeCards.map((card: Card, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper\">\n                                    <div className=\"card-wrapper\">\n                                        <img src={svg} className={`${Colors[card._color]}-${Values[card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"draw-pile\">\n                        {game.drawPile && game.drawPile.shuffle.map((_: any, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-medium\" style={{\n                                    'position': 'absolute',\n                                    'zIndex': -1*idx,\n                                    'top': '0',\n                                    'left': '0',\n                                    'transform': `translateY(${idx * 0.4}px) rotateX(80deg)`\n                                }}>\n                                    <div className=\"card-wrapper-medium\">\n                                        <img src={svg} className=\"BACK\"></img>\n                                    </div>\n                                </div>\n                            )})}\n                    </div>\n                    <div className=\"current-cards\">\n                        <div className=\"teammate-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === teammate.name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === teammate.name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"op-1-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === opponents[0].name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === opponents[0].name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"op-2-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === opponents[1].name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === opponents[1].name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                        <div className=\"self-card\">\n                            {currentRoundCards.find(cards => cards[0].playedBy.name === player.name) && (\n                                currentRoundCards.find(cards => cards[0].playedBy.name === player.name)!.map((card, idx) => {\n                                    return (\n                                        <div key={idx} className=\"outer-wrapper-medium\">\n                                            <div className=\"card-wrapper-medium\">\n                                                <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                            </div>\n                                        </div>\n                                    )\n                                })\n                            )}\n                        </div>\n                    </div>\n                    {game.phase === 'PLAYING' && (\n                        <div className=\"taken-cards\">\n                            {game._teams.find(team => team.role === 'ATTACK')!._ownedCards.length !== 0 && <div className=\"description\">Cards taken</div>}\n                            {game._teams.find(team => team.role === 'ATTACK')!._ownedCards.map((card: OwnedCard, idx: number) => {\n                            return (\n                                <div key={idx} className=\"outer-wrapper-medium\">\n                                    <div className=\"card-wrapper-medium\">\n                                        <img src={svg} className={`${Colors[card.card._color]}-${Values[card.card._value]}`}></img>\n                                    </div>\n                                </div>\n                            )})}\n                        </div>\n                    )}\n                    {game.phase === 'PLAYING' && (\n                        <div className=\"discarded-cards\">\n                            {game._discardedPile.length !== 0 && <div className=\"description\">Cards discarded</div>}\n                            {game._discardedPile.map((_: any, idx: number) => {\n                                return (\n                                    <div key={idx} className=\"outer-wrapper-medium\" style={{\n                                        'position': 'absolute',\n                                        'zIndex': -1*idx,\n                                        'top': '0',\n                                        'left': '0',\n                                        'transform': `translateY(${idx * 0.4}px) rotateX(80deg)`\n                                    }}>\n                                        <div className=\"card-wrapper-medium\">\n                                            <img src={svg} className=\"BACK\"></img>\n                                        </div>\n                                    </div>\n                            )})}\n                        </div>\n                    )}\n                </div>\n            </div>\n            <div ref={_console} className=\"console\">\n                {consoleMessages.map((message: string, idx: number) => {\n                    return (\n                        <div key={idx} className=\"console-message\">\n                            {message}\n                        </div>\n                    )\n                })}\n            </div>\n            {res && <ResultChinese isOpen={res.isOpen} discardedCards={res.discardedCards} takenCards={res.takenCards} score={res.score} flip={res.flip} hiddenCards={res.hiddenCards}/>}\n        </>\n    )\n}\n","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport { SocketContext, GameObject, Room } from './App';\nimport { Values } from './game-engine';\nimport Game from './Game';\nimport GameChinese from './GameChinese';\nimport Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nexport default function Home() {\n\n    const socket = useContext(SocketContext);\n\n    const [name, setName] = useState<string>();\n    const [role, setRole] = useState<'ATTACK' | 'DEFEND'>('ATTACK');\n    const [room, setRoom] = useState<string>();\n    const [lang, setLang] = useState<'ENG' | 'CHN'>(cookies.get('lang') || 'ENG');\n\n    const [masterNumber, setMasterNumber] = useState<string>(\"2\");\n\n    const [game, setGame] = useState<boolean | object>(false);\n\n    const [hasRoom, setHasRoom] = useState<boolean | Room>(false);\n    const [isReady, setIsReady] = useState<boolean>(false);\n\n    const alert = useRef<HTMLDivElement>(null);\n    const langRef = useRef<'CHN' | 'ENG'>('ENG');\n    const nameRef = useRef<string>();\n    const roomRef = useRef<string>();\n\n    const setCookies = () => {\n        cookies.set('name', nameRef.current);\n        cookies.set('room', roomRef.current);\n        cookies.set('lang', langRef.current);\n    }\n\n    useEffect(() => {\n        socket.on('gameStart', ({game}: {game: object}) => {\n            setCookies();\n            setGame(game);\n        });\n\n        socket.on('roomJoin', (room: Room) => {\n            setHasRoom(room);\n        });\n\n        socket.on('roomUpdate', (room: Room) => {\n            setHasRoom(room);\n        });\n\n        socket.on('oops', (e: string) => {\n            if(!alert.current) return;\n            switch(e){\n                case 'DUPE_NAME':\n                    alert.current!.innerHTML = (langRef.current === 'ENG' ? 'Someone in this room already has your name!' : '您的姓名在該房間內出現了重複！');\n                    break;\n                case 'FULL':\n                    alert.current!.innerHTML = (langRef.current === 'ENG' ? 'This room is full!' : '該房間已經人滿了！');\n                    break;\n                case 'IN_GAME':\n                    alert.current!.innerHTML = (langRef.current === 'ENG' ? 'This room is already in-game!' : '該房間已經開始遊戲了！');\n                    break;\n                case 'DUPE_ROLE':\n                    alert.current!.innerHTML = (langRef.current === 'ENG' ? 'There are already two players taking your role!' : '該房間已經有兩位相同角色的玩家了！');\n                    break;\n            }\n        });\n    }, []);\n\n    const handleSubmit = (e: React.FormEvent<HTMLButtonElement>) => {\n        e.preventDefault();\n\n        if(!name || !role || !room){\n            alert.current!.innerHTML = lang === 'ENG' ? 'Please fill in all required fields!' : '請填寫所有的選項！';\n            return;\n        }\n\n        if(name.length > 14){\n            alert.current!.innerHTML = lang === 'ENG' ? 'Your name cannot be longer than 14 characters!' : '您的姓名不能超過14個字節！';\n            return;\n        }\n\n        socket.emit('setName', {name, role, room});\n    }\n\n    const toggleReady = () => {\n        if(hasRoom){\n            socket.emit('toggleReady', masterNumber);\n            setIsReady(!isReady);\n        }\n    }\n\n    if(game){\n        if(lang === 'ENG'){\n            return <Game game={game as GameObject} name={name!}/>;\n        }else{\n            return <GameChinese game={game as GameObject} name={name!}/>;\n        }\n    }\n\n    if(hasRoom){\n        return (\n            <div className=\"home-container\">\n                <div className=\"select-lang\">\n                    <select name=\"language\" defaultValue={lang} onChange={e => {setLang(e.target.value as 'ENG' | 'CHN'); langRef.current = e.target.value as 'ENG' | 'CHN'; cookies.set('lang', e.target.value)}}>\n                        <option value=\"ENG\">English</option>\n                        <option value=\"CHN\">中文</option>\n                    </select>\n                </div>\n                <div className=\"room-name\">\n                    {lang === 'ENG' ? `You are in room ${(typeof hasRoom != \"boolean\") && hasRoom.name}` : `您正在房間${(typeof hasRoom != \"boolean\") && hasRoom.name}裡`}\n                </div>\n                <div className=\"room-info\">\n    \n                </div>\n                <div className=\"room-players\">\n                    {(typeof hasRoom != \"boolean\") && hasRoom.players.map(player => {\n                        if(player.name === name){\n                            return (\n                                <div key=\"1\" className=\"room-player\">\n                                    <div className=\"name\"><label>{lang === 'ENG' ? 'Name' : '姓名'}</label><div className=\"inner\">{lang === 'ENG' ? `${player.name} (You)` : `${player.name}（您）`}</div></div>\n                                    <div className=\"role\"><label>{lang === 'ENG' ? 'Role' : '隊伍'}</label><div className=\"inner\">{player.role === 'ATTACK' ? lang === 'ENG' ? 'ATTACK' : '掙分' : lang === 'ENG' ? 'DEFEND' : '打分'}</div></div>\n                                    <div className={player.isReady ? 'ready' : 'not-ready'}><label>{lang === 'ENG' ? 'Status' : '狀態'}</label><div className=\"inner\">{player.isReady ? lang === 'ENG' ? 'Ready' : '已準備好' : lang === 'ENG' ? 'Not ready' : '未準備好'}</div></div>\n                                </div>\n                            )}})\n                    }\n                    {(typeof hasRoom != \"boolean\") && hasRoom.players.map(player => {\n                        if(!(player.name === name)){\n                            return (\n                                <div key={player.name} className=\"room-player\">\n                                    <div className=\"name\"><label>{lang === 'ENG' ? 'Name' : '姓名'}</label><div className=\"inner\">{player.name}</div></div>\n                                    <div className=\"role\"><label>{lang === 'ENG' ? 'Role' : '隊伍'}</label><div className=\"inner\">{player.role === 'ATTACK' ? lang === 'ENG' ? 'ATTACK' : '掙分' : lang === 'ENG' ? 'DEFEND' : '打分'}</div></div>\n                                    <div className={player.isReady ? 'ready' : 'not-ready'}><label>{lang === 'ENG' ? 'Status' : '狀態'}</label><div className=\"inner\">{player.isReady ? lang === 'ENG' ? 'Ready' : '已準備好' : lang === 'ENG' ? 'Not ready' : '未準備好'}</div></div>\n                                </div>\n                            )}})\n                    }\n                </div>\n                <div className=\"master-number\">\n                    <select defaultValue={Values.TWO} name=\"masterNumber\" onChange={e => setMasterNumber(e.target.value)}>\n                        <option value={Values.TWO}>2</option>\n                        <option value={Values.THREE}>3</option>\n                        <option value={Values.FOUR}>4</option>\n                        <option value={Values.FIVE}>5</option>\n                        <option value={Values.SIX}>6</option>\n                        <option value={Values.SEVEN}>7</option>\n                        <option value={Values.EIGHT}>8</option>\n                        <option value={Values.NINE}>9</option>\n                        <option value={Values.TEN}>10</option>\n                        <option value={Values.JACK}>J</option>\n                        <option value={Values.QUEEN}>Q</option>\n                        <option value={Values.KING}>K</option>\n                        <option value={Values.ACE}>A</option>\n                        <option value={'JOKER'}>JOKER</option>\n                    </select>\n                </div>\n                <div className=\"toggle-ready\">\n                    <button className={isReady ? 'ready' : 'not-ready'} onClick={() => toggleReady()}>{isReady ? lang === 'ENG' ? 'I\\'m not ready' : '我沒準備好' : lang === 'ENG' ? 'I\\'m ready' : '我準備好了'}</button>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"home-container\">\n            <div className=\"select-lang\">\n                <select name=\"language\" defaultValue={lang} onChange={e => {setLang(e.target.value as 'ENG' | 'CHN'); langRef.current = e.target.value as 'ENG' | 'CHN'; cookies.set('lang', e.target.value)}}>\n                    <option value=\"ENG\">English</option>\n                    <option value=\"CHN\">中文</option>\n                </select>\n            </div>\n            <div className=\"form-container\">\n                <input placeholder={lang === 'ENG' ? 'Room' : '房間'} name=\"room\" onChange={e => {setRoom(e.target.value); roomRef.current = e.target.value}}></input>\n                <input placeholder={lang === 'ENG' ? 'Name' : '姓名'} name=\"name\" onChange={e => {setName(e.target.value); nameRef.current = e.target.value}}></input>\n                <select name=\"role\" defaultValue=\"ATTACK\" onChange={e => setRole(e.target.value as 'ATTACK' | 'DEFEND')}>\n                    <option value=\"ATTACK\">{lang === 'ENG' ? 'Attacking team' : '掙分'}</option>\n                    <option value=\"DEFEND\">{lang === 'ENG' ? 'Defending team' : '打分'}</option>\n                </select>\n                    <div className=\"alert\" ref={alert}></div>\n                <button type=\"submit\" onClick={e => handleSubmit(e)}>{lang === 'ENG' ? 'Confirm' : '確認'}</button>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport socketIOClient from 'socket.io-client';\nimport Home from './Home';\nimport { Values, Colors } from './game-engine';\nimport Cookies from 'universal-cookie';\nimport Game from './Game';\nimport GameChinese from './GameChinese';\n\nconst HOST = window.location.origin.replace(/^http/, 'ws');\n\nconst socket = socketIOClient(HOST);\n\nexport const SocketContext = React.createContext<SocketIOClient.Socket>(socket);\n\nexport interface ResultObject {\n  isOpen: boolean,\n  discardedCards: DiscardedCard[],\n  takenCards: OwnedCard[],\n  flip: boolean,\n  score: number,\n  hiddenCards: Card[]\n}\n\nexport interface OwnedCard {\n  card: Card,\n  points: number\n}\n\nexport interface Card {\n  _value: Values,\n  _color: Colors,\n  wasHidden: boolean;\n}\n\nexport interface Player {\n  hand: Card[],\n  name: string,\n  role: 'DEFEND' | 'ATTACK',\n  isReady: boolean\n}\n\nexport interface OwnedCard {\n  card: Card,\n  points: number\n}\n\nexport interface Team {\n  _players: Player[],\n  _ownedCards: OwnedCard[],\n  role: 'ATTACK' | 'DEFEND'\n}\n\nexport interface DiscardedCard {\n  card: Card,\n  playedBy: Player\n}\n\nexport interface GameObject {\n  _players: Player[],\n  _currentRoundCards: DiscardedCard[],\n  _currentRoundTopCards: Card[],\n  _currentPlayer: Player,\n  _teams: [Team, Team],\n  _discardedPile: DiscardedCard[],\n  _hiddenCards: Card[],\n  currentRoundCount: number,\n  roundCount: number,\n  masterNumber: number,\n  phase: 'DRAWING' | 'TAKING' | 'PUTTING' | 'PLAYING',\n  [x: string]: any\n}\n\nexport interface Room {\n  name: string | undefined,\n  game: GameObject | undefined,\n  players: Player[],\n  currentPlayers: Player[]\n}\n\nconst cookies = new Cookies();\n\nfunction App() {\n\n  const [game, setGame] = useState<GameObject>();\n\n  useEffect(() => {\n    let name = cookies.get('name');\n    let room = cookies.get('room');\n    let lang = cookies.get('lang');\n\n    console.log({name, room, lang});\n\n    if(name && room && lang){\n      socket.emit('recoverRoom', {name, room});\n    }\n\n    socket.on('roomRecover', ({game}: {game: GameObject}) => {\n      setGame(game);\n    });\n  }, []);\n\n  if(game){\n    return (\n      <SocketContext.Provider value={socket}>\n        <div className=\"App\">\n          <div className=\"warning\">\n              <p>Your screen size is too small for the game. Please switch to Landscape view or change to a larger device!</p>\n          </div>\n          {cookies.get('lang') === 'ENG' ? <Game game={game} name={cookies.get('name')} /> : <GameChinese game={game} name={cookies.get('name')} />}\n      </div>\n      </SocketContext.Provider>\n    )}\n\n  return (\n    <SocketContext.Provider value={socket}>\n      <div className=\"App\">\n          <div className=\"warning\">\n              <p>Your screen size is too small for the game. Please switch to Landscape view or change to a larger device!</p>\n          </div>\n          <Home />\n      </div>\n    </SocketContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}